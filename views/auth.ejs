<% layout('layout') %>
<main class="vh-100 d-flex align-items-sm-center justify-content-center pt-5 mt-5 mt-sm-0 pt-sm-0 px-4 px-sm-0">
    <section style="width: 100%; max-width: 420px;">
        <div class="mb-5 d-flex justify-content-center">
            <img src="/logo.png" style="max-width:120px;width:calc(100% - 36px)">
        </div>
        <% if (authMode === 'register') { %>
        <div class="mb-4">
            <h2 class="fw-bold mb-2">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
            <p class="text-muted mt-3">
                –°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
            </p>
        </div>

        <form method="POST" action="/auth-api/register" class="d-grid gap-3 mt-4">
            <label for="reg-password">–ü–∞—Ä–æ–ª—å</label>
            <div class="input-group p-1 border rounded-4">
                <input type="password" name="password" placeholder="–ü–∞—Ä–æ–ª—å" class="form-control form-control-lg border-0"
                     required id="reg-password" />
                <button type="button" class="btn text-secondary border-0 btn-lg" onclick="togglePassword('reg-password', this)"
                    tabindex="-1">
                    <i class="bi bi-eye"></i>
                </button>
            </div>
            <button type="submit" class="btn btn-success btn-lg w-100 rounded-4">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</button>
        </form>

        <% } else { %>
        <div class="mb-4">
            <h2 class="fw-bold mb-2">–í–æ–π—Ç–∏</h2>
            <p class="text-muted mt-4">–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</p>
        </div>

        <form method="POST" action="/auth-api/login" class="d-grid gap-3 mt-4">
            <label for="login-password" class="text-muted">–ü–∞—Ä–æ–ª—å</label>
            <div class="input-group border rounded-4 p-1">
                <input type="password" name="password" placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                    class="form-control form-control-lg text-center border-0" required
                    id="login-password" />
                <button type="button" class="btn text-secondary border-0" onclick="togglePassword('login-password', this)"
                    tabindex="-1" id="toggle-login">
                    <i class="bi bi-eye"></i>
                </button>
            </div>
            <button type="submit" name="submit" class="btn btn-primary btn-lg w-100 rounded-4">–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</button>

            <div class="d-flex align-items-center my-2">
                <hr class="flex-grow-1">
                <div class="px-2 text-muted small text-nowrap">–∏–ª–∏</div>
                <hr class="flex-grow-1">
            </div>
            
            <div class="row gap-sm-0 gap-4">
                <div class="col-sm-6">
                    <button type="button" onclick="location.href='/auth-api/guest'" class="btn btn-lg w-100 btn-outline-dark border rounded-4">
                        üë§ –ì–æ—Å—Ç—å
                    </button>
                </div>
                <div class="col-sm-6">
                    <button type="button" data-bs-toggle="modal" data-bs-target="#showConnectModal" class="btn btn-lg w-100 btn-outline-dark border rounded-4">
                        üì≤ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                    </button>
                </div>
            </div>
        </form>
        <% } %>

    </section>
</main>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const form = document.querySelector('form');
        if (!form) return;
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());
            const url = form.getAttribute('action');
            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });
                const result = await response.json();
                if (result.success === true) {
                    window.location.href = "/";
                } else {
                    alert("–ù–µ –≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
                }
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', err);
            }
        });
        document.getElementById("login-password").addEventListener("keydown", function (e) {
            if (e.key === "Enter") {
                e.preventDefault();
                form.dispatchEvent(new Event("submit", { cancelable: true, bubbles: true }));
            }
        });
    });

    function togglePassword(id, button) {
        const input = document.getElementById(id);
        if (!input || !button) return;
        const icon = button.querySelector('i');
        if (!icon) return;
        if (input.type === 'password') {
            input.type = 'text';
            icon.classList.remove('bi-eye');
            icon.classList.add('bi-eye-slash');
        } else {
            input.type = 'password';
            icon.classList.remove('bi-eye-slash');
            icon.classList.add('bi-eye');
        }
    }
</script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('input[type="password"]').forEach(input => {
      input.addEventListener('input', (e) => {
        // –†–∞–∑—Ä–µ—à–µ–Ω—ã: –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
        const allowed = /^[\x21-\x7E]+$/; // ASCII printable chars, –∏—Å–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª
        if (!allowed.test(e.target.value)) {
          e.target.value = e.target.value.replace(/[^\x21-\x7E]/g, '');
        }
      });

      input.addEventListener('keypress', (e) => {
        const char = String.fromCharCode(e.which);
        const allowed = /^[\x21-\x7E]$/; // –∑–∞–ø—Ä–µ—Ç –ø—Ä–æ–±–µ–ª–∞ –∏ –Ω–µ–ª–∞—Ç–∏–Ω—Å–∫–∏—Ö
        if (!allowed.test(char)) {
          e.preventDefault();
        }
      });
    });
  });
</script>
