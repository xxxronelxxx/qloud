<% layout('layout') %>

<%- include("modules/header.ejs") %>

<main class="container-xxl py-4">
  <h1 class="h3 mb-3">Торренты</h1>

  <div class="row g-4">
    <!-- Поиск на Kinozal.tv -->
    <div class="col-12">
      <div class="card rounded-4">
        <div class="card-body">
          <h2 class="h5 mb-3">Поиск на Kinozal.tv</h2>
          <form id="kinozalSearchForm" class="d-grid gap-3">
            <div class="row">
              <div class="col-md-8">
                <input type="text" id="kinozalSearchInput" class="form-control rounded-4" placeholder="Введите название фильма или сериала для поиска" required>
              </div>
              <div class="col-md-4">
                <button class="btn btn-primary rounded-4 w-100" type="submit">Поиск</button>
              </div>
            </div>
          </form>
          
          <div id="kinozalResults" class="mt-3" style="display: none;">
            <h3 class="h6">Результаты поиска:</h3>
            <div id="kinozalResultsList" class="d-flex flex-column gap-2"></div>
          </div>
          
          <div id="kinozalFiles" class="mt-3" style="display: none;">
            <h3 class="h6">Файлы торрента:</h3>
            <div id="kinozalFilesList" class="d-flex flex-column gap-1"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Добавление торрентов -->
    <div class="col-12 col-lg-4">
      <div class="card rounded-4">
        <div class="card-body d-grid gap-3">
          <h2 class="h5 m-0">Добавить</h2>
          <form id="magnetForm" class="d-grid gap-2">
            <input class="form-control rounded-4" id="magnetInput" placeholder="Вставьте magnet-ссылку"/>
            <button class="btn btn-primary rounded-4" type="submit">Добавить по magnet</button>
          </form>
          <div class="text-center text-muted">или</div>
          <div id="dropZone" class="border rounded-4 p-4 text-center" style="border-style:dashed">
            Перетащите .torrent сюда
            <input id="fileInput" type="file" accept=".torrent" hidden />
            <div class="mt-2">
              <button class="btn btn-outline-secondary btn-sm rounded-4" id="chooseBtn" type="button">Выбрать файл</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Список загрузок -->
    <div class="col-12 col-lg-8">
      <div class="card rounded-4">
        <div class="card-body">
          <h2 class="h5">Загрузки</h2>
          <div id="list" class="d-flex flex-column gap-3"></div>
        </div>
      </div>
    </div>
  </div>
</main>

<script src="/socket.io/socket.io.js"></script>
<script>
  const listEl = document.getElementById('list');
  const socket = io();

  const fmtSize = (n) => {
    if (!n && n !== 0) return '';
    const units = ['B','KB','MB','GB','TB'];
    let i=0; let v=n;
    while (v>=1024 && i<units.length-1) { v/=1024; i++; }
    return v.toFixed(1)+' '+units[i];
  };

  function renderItem(t) {
    const id = 't_'+t.infoHash;
    let el = document.getElementById(id);
    if (!el) {
      el = document.createElement('div');
      el.id = id;
      el.className = 'p-3 rounded-4 border d-grid gap-2';
      el.innerHTML = `
        <div class="d-flex justify-content-between align-items-center">
          <div class="fw-medium text-truncate" title="${t.name||t.infoHash}">${t.name||t.infoHash}</div>
          <div class="d-flex gap-2">
            <button class="btn btn-outline-secondary btn-sm rounded-4" data-toggle="${t.paused ? 'resume' : 'pause'}">${t.paused ? 'Пуск' : 'Пауза'}</button>
            <div class="btn-group">
              <button class="btn btn-outline-danger btn-sm rounded-4" data-remove="${t.infoHash}">Удалить</button>
              <button class="btn btn-outline-danger btn-sm rounded-4 dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false"></button>
              <ul class="dropdown-menu px-1 py-2 rounded-4" data-bs-theme="dark">
                <li><button class="dropdown-item rounded-4" data-remove-files="${t.infoHash}">Удалить с файлами</button></li>
              </ul>
            </div>
          </div>
        </div>
        <div class="progress rounded-4" style="height: 18px;">
          <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%"></div>
        </div>
        <div class="d-flex justify-content-between small text-muted">
          <div><span data-prog>0</span>% • <span data-down>0</span> / <span data-len>0</span></div>
          <div>⬇ <span data-ds>0</span>/s • ⬆ <span data-us>0</span>/s • peers: <span data-p>0</span></div>
        </div>
        <div class="mt-2 d-flex flex-wrap gap-2" data-files></div>
      `;
      listEl.appendChild(el);
      el.querySelector('[data-remove]').onclick = async () => {
        const r = await fetch(`/torrents/api/${t.infoHash}`,{method:'DELETE'});
        const d = await r.json().catch(()=>({}));
        if (d && d.success) el.remove();
      };
      const removeFilesBtn = el.querySelector('[data-remove-files]');
      removeFilesBtn.onclick = async () => {
        if (!confirm('Удалить торрент и все скачанные данные?')) return;
        const r = await fetch(`/torrents/api/${t.infoHash}?deleteFiles=1`,{method:'DELETE'});
        const d = await r.json().catch(()=>({}));
        if (d && d.success) el.remove();
      };
      const toggleBtn = el.querySelector('[data-toggle]');
      toggleBtn.onclick = async () => {
        const action = toggleBtn.getAttribute('data-toggle');
        if (action === 'pause') {
          await fetch(`/torrents/api/${t.infoHash}/pause`, { method:'POST' });
        } else {
          await fetch(`/torrents/api/${t.infoHash}/resume`, { method:'POST' });
        }
      };
    }
    const bar = el.querySelector('.progress-bar');
    const prog = el.querySelector('[data-prog]');
    const down = el.querySelector('[data-down]');
    const len = el.querySelector('[data-len]');
    const ds = el.querySelector('[data-ds]');
    const us = el.querySelector('[data-us]');
    const p = el.querySelector('[data-p]');
    const files = el.querySelector('[data-files]');
    const toggleBtn = el.querySelector('[data-toggle]');
    if (toggleBtn) {
      const paused = !!t.paused;
      toggleBtn.textContent = paused ? 'Пуск' : 'Пауза';
      toggleBtn.setAttribute('data-toggle', paused ? 'resume' : 'pause');
    }

    bar.style.width = (t.progress||0)+"%";
    prog.textContent = t.progress||0;
    down.textContent = fmtSize(t.downloaded||0);
    len.textContent = fmtSize(t.length||0);
    ds.textContent = fmtSize(t.downloadSpeed||0);
    us.textContent = fmtSize(t.uploadSpeed||0);
    p.textContent = t.numPeers||0;

    if (files) files.innerHTML = '';
    if (!t.files || !t.files.length) {
      const span = document.createElement('span');
      span.className = 'text-muted small';
      span.textContent = 'Файлы не загружены (идёт получение метаданных)';
      files?.appendChild(span);
    } else if (files) {
      t.files.forEach(f => {
        const playMime = ['video/mp4','video/webm','audio/mpeg','audio/mp3','audio/aac','audio/ogg'];
        const btn = document.createElement('a');
        btn.className = 'btn btn-outline-primary btn-sm rounded-4';
        btn.textContent = f.name;
        const canPlay = playMime.includes(f.mime);
        btn.href = canPlay ? `/torrents/stream/${t.infoHash}/${f.index}` : '#';
        btn.target = canPlay ? '_blank' : '';
        if (!canPlay) btn.classList.add('disabled');
        files.appendChild(btn);
      });
    }
  }

  socket.on('torrent:add', renderItem);
  socket.on('torrent:update', renderItem);
  socket.on('torrent:remove', ({infoHash}) => {
    const el = document.getElementById('t_'+infoHash);
    if (el) el.remove();
  });

  (async () => {
    const res = await fetch('/torrents/api/list');
    const data = await res.json();
    if (data && data.items) data.items.forEach(renderItem);
  })();

  document.getElementById('magnetForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const val = document.getElementById('magnetInput').value.trim();
    if (!val) return;
    await fetch('/torrents/api/add-magnet', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ magnet: val }) });
    document.getElementById('magnetInput').value = '';
  });

  const dz = document.getElementById('dropZone');
  const fi = document.getElementById('fileInput');
  document.getElementById('chooseBtn').onclick = () => fi.click();
  ['dragenter','dragover','dragleave','drop'].forEach(ev => dz.addEventListener(ev, e => { e.preventDefault(); e.stopPropagation(); }));
  dz.addEventListener('dragover', () => dz.classList.add('bg-body-tertiary'));
  dz.addEventListener('dragleave', () => dz.classList.remove('bg-body-tertiary'));
  dz.addEventListener('drop', async (e) => {
    dz.classList.remove('bg-body-tertiary');
    const file = e.dataTransfer.files[0];
    if (!file) return;
    const fd = new FormData();
    fd.append('torrent', file);
    await fetch('/torrents/api/add-file', { method:'POST', body: fd });
  });
  fi.addEventListener('change', async () => {
    const file = fi.files[0];
    if (!file) return;
    const fd = new FormData();
    fd.append('torrent', file);
    await fetch('/torrents/api/add-file', { method:'POST', body: fd });
    fi.value = '';
  });

  // Kinozal.tv поиск
  const kinozalSearchForm = document.getElementById('kinozalSearchForm');
  const kinozalSearchInput = document.getElementById('kinozalSearchInput');
  const kinozalResults = document.getElementById('kinozalResults');
  const kinozalResultsList = document.getElementById('kinozalResultsList');
  const kinozalFiles = document.getElementById('kinozalFiles');
  const kinozalFilesList = document.getElementById('kinozalFilesList');

  kinozalSearchForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const query = kinozalSearchInput.value.trim();
    if (!query) return;

    try {
      kinozalResultsList.innerHTML = '<div class="text-center"><div class="spinner-border" role="status"></div><div class="mt-2">Поиск...</div></div>';
      kinozalResults.style.display = 'block';
      kinozalFiles.style.display = 'none';

      const res = await fetch(`/api/kinozal/search?query=${encodeURIComponent(query)}`);
      const data = await res.json();

      if (data.success && data.torrents) {
        renderKinozalResults(data.torrents);
      } else {
        kinozalResultsList.innerHTML = `<div class="alert alert-warning">${data.msg || 'Ошибка поиска'}</div>`;
      }
    } catch (error) {
      console.error('Kinozal search error:', error);
      kinozalResultsList.innerHTML = '<div class="alert alert-danger">Ошибка сети</div>';
    }
  });

  function renderKinozalResults(torrents) {
    if (!torrents || torrents.length === 0) {
      kinozalResultsList.innerHTML = '<div class="alert alert-info">Ничего не найдено</div>';
      return;
    }

    kinozalResultsList.innerHTML = torrents.map(torrent => `
      <div class="card rounded-3 border">
        <div class="card-body p-3">
          <div class="d-flex justify-content-between align-items-start">
            <div class="flex-grow-1">
              <h6 class="mb-1">${torrent.title}</h6>
              <div class="small text-muted">
                Размер: ${torrent.size} | Сиды: ${torrent.seeds} | Личи: ${torrent.leeches} | Дата: ${torrent.date}
              </div>
            </div>
            <div class="d-flex gap-2">
              <button class="btn btn-outline-primary btn-sm rounded-3" onclick="showKinozalFiles('${torrent.id}')">
                Файлы
              </button>
              <button class="btn btn-outline-success btn-sm rounded-3" onclick="addKinozalTorrent('${torrent.id}')">
                Добавить
              </button>
            </div>
          </div>
        </div>
      </div>
    `).join('');
  }

  async function showKinozalFiles(torrentId) {
    try {
      kinozalFilesList.innerHTML = '<div class="text-center"><div class="spinner-border spinner-border-sm" role="status"></div><div class="mt-2">Загрузка...</div></div>';
      kinozalFiles.style.display = 'block';

      const res = await fetch(`/api/kinozal/files/${torrentId}`);
      const data = await res.json();

      if (data.success && data.files) {
        renderKinozalFiles(data.files);
      } else {
        kinozalFilesList.innerHTML = `<div class="alert alert-warning">${data.msg || 'Ошибка загрузки файлов'}</div>`;
      }
    } catch (error) {
      console.error('Kinozal files error:', error);
      kinozalFilesList.innerHTML = '<div class="alert alert-danger">Ошибка сети</div>';
    }
  }

  function renderKinozalFiles(files) {
    if (!files || files.length === 0) {
      kinozalFilesList.innerHTML = '<div class="alert alert-info">Файлы не найдены</div>';
      return;
    }

    kinozalFilesList.innerHTML = files.map(file => `
      <div class="d-flex justify-content-between align-items-center p-2 bg-body-secondary rounded-2">
        <div class="flex-grow-1">
          <div class="small">${file.name}</div>
          <div class="small text-muted">${file.path}</div>
        </div>
        <div class="small text-muted">${file.size}</div>
      </div>
    `).join('');
  }

  async function addKinozalTorrent(torrentId) {
    try {
      const res = await fetch(`/api/kinozal/magnet/${torrentId}`);
      const data = await res.json();

      if (data.success && data.magnetLink) {
        // Добавляем magnet-ссылку в торрент-клиент
        await fetch('/torrents/api/add-magnet', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ magnet: data.magnetLink })
        });
        alert('Торрент добавлен в загрузки!');
      } else {
        alert(data.msg || 'Ошибка получения magnet-ссылки');
      }
    } catch (error) {
      console.error('Kinozal add torrent error:', error);
      alert('Ошибка добавления торрента');
    }
  }
</script>