<% layout('layout') %>

<%- include("modules/header.ejs") %>

<main class="container-xxl py-4">
  <h1 class="h3 mb-4">Умная обработка файлов</h1>

  <div class="row g-4">
    <!-- Статус системы -->
    <div class="col-12">
      <div class="card rounded-4">
        <div class="card-body">
          <h2 class="h5 mb-3">Статус системы</h2>
          <div class="row">
            <div class="col-md-3">
              <div class="d-flex align-items-center gap-2">
                <div id="mediainfo-status" class="badge bg-secondary">Проверка...</div>
                <span>MediaInfo</span>
              </div>
            </div>
            <div class="col-md-3">
              <div class="d-flex align-items-center gap-2">
                <div id="tmdb-status" class="badge bg-secondary">Проверка...</div>
                <span>TMDB API</span>
              </div>
            </div>
            <div class="col-md-3">
              <div class="d-flex align-items-center gap-2">
                <span>Кэш TMDB:</span>
                <span id="tmdb-cache-size">0</span>
              </div>
            </div>
            <div class="col-md-3">
              <div class="d-flex align-items-center gap-2">
                <span>Кэш MediaInfo:</span>
                <span id="mediainfo-cache-size">0</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Анализ файла -->
    <div class="col-12 col-lg-6">
      <div class="card rounded-4">
        <div class="card-body">
          <h2 class="h5 mb-3">Анализ файла</h2>
          <form id="analyzeFileForm" class="d-grid gap-3">
            <div>
              <label class="form-label">Путь к файлу</label>
              <input type="text" id="analyzeFilePath" class="form-control rounded-4" placeholder="/path/to/movie.mp4" required>
            </div>
            <div class="d-flex gap-2">
              <button class="btn btn-primary rounded-4" type="submit">Анализировать</button>
              <button class="btn btn-outline-secondary rounded-4" type="button" id="clearAnalysisBtn">Очистить</button>
            </div>
          </form>
          
          <div id="analysisResult" class="mt-3" style="display: none;">
            <h3 class="h6">Результат анализа:</h3>
            <div id="analysisContent" class="bg-body-secondary rounded-3 p-3"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Обработка файла -->
    <div class="col-12 col-lg-6">
      <div class="card rounded-4">
        <div class="card-body">
          <h2 class="h5 mb-3">Обработка файла</h2>
          <form id="processFileForm" class="d-grid gap-3">
            <div>
              <label class="form-label">Путь к файлу</label>
              <input type="text" id="processFilePath" class="form-control rounded-4" placeholder="/path/to/movie.mp4" required>
            </div>
            <div>
              <label class="form-label">Шаблон имени</label>
              <input type="text" id="fileNameTemplate" class="form-control rounded-4" value="{Title} ({Year}) [{Rating}] {Quality}.{Extension}" placeholder="Шаблон имени файла">
            </div>
            <div class="d-flex gap-2">
              <button class="btn btn-success rounded-4" type="submit">Обработать</button>
              <button class="btn btn-outline-warning rounded-4" type="button" id="processDirectoryBtn">Обработать папку</button>
            </div>
          </form>
          
          <div id="processingResult" class="mt-3" style="display: none;">
            <h3 class="h6">Результат обработки:</h3>
            <div id="processingContent" class="bg-body-secondary rounded-3 p-3"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Поиск фильма -->
    <div class="col-12">
      <div class="card rounded-4">
        <div class="card-body">
          <h2 class="h5 mb-3">Поиск фильма в TMDB</h2>
          <form id="searchMovieForm" class="d-grid gap-3">
            <div class="row">
              <div class="col-md-8">
                <label class="form-label">Название фильма</label>
                <input type="text" id="movieQuery" class="form-control rounded-4" placeholder="Название фильма" required>
              </div>
              <div class="col-md-4">
                <label class="form-label">Год (опционально)</label>
                <input type="number" id="movieYear" class="form-control rounded-4" placeholder="2023" min="1900" max="2030">
              </div>
            </div>
            <div>
              <button class="btn btn-info rounded-4" type="submit">Найти фильм</button>
            </div>
          </form>
          
          <div id="searchResult" class="mt-3" style="display: none;">
            <h3 class="h6">Результат поиска:</h3>
            <div id="searchContent" class="bg-body-secondary rounded-3 p-3"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Статус обработки -->
    <div class="col-12">
      <div class="card rounded-4">
        <div class="card-body">
          <h2 class="h5 mb-3">Статус обработки</h2>
          <div class="d-flex gap-2 mb-3">
            <button class="btn btn-outline-primary rounded-4" type="button" id="refreshStatusBtn">Обновить статус</button>
            <button class="btn btn-outline-danger rounded-4" type="button" id="clearCachesBtn">Очистить кэши</button>
          </div>
          <div id="processingStatus" class="bg-body-secondary rounded-3 p-3">
            <p class="text-muted mb-0">Нет активных задач обработки</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</main>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Проверка статуса системы
    checkSystemStatus();
    
    // Обновление статистики
    updateStats();
    
    // Обработчики форм
    document.getElementById('analyzeFileForm').addEventListener('submit', analyzeFile);
    document.getElementById('processFileForm').addEventListener('submit', processFile);
    document.getElementById('searchMovieForm').addEventListener('submit', searchMovie);
    document.getElementById('processDirectoryBtn').addEventListener('click', processDirectory);
    document.getElementById('refreshStatusBtn').addEventListener('click', refreshStatus);
    document.getElementById('clearCachesBtn').addEventListener('click', clearCaches);
    document.getElementById('clearAnalysisBtn').addEventListener('click', clearAnalysis);
    
    // Автообновление статуса каждые 5 секунд
    setInterval(refreshStatus, 5000);
});

async function checkSystemStatus() {
    try {
        // Проверка MediaInfo
        const mediainfoRes = await fetch('/api/smart/check-mediainfo');
        const mediainfoData = await mediainfoRes.json();
        const mediainfoStatus = document.getElementById('mediainfo-status');
        mediainfoStatus.className = `badge ${mediainfoData.available ? 'bg-success' : 'bg-warning'}`;
        mediainfoStatus.textContent = mediainfoData.available ? 'Доступен' : 'Недоступен';
        
        // Проверка TMDB API
        const tmdbRes = await fetch('/api/smart/check-tmdb');
        const tmdbData = await tmdbRes.json();
        const tmdbStatus = document.getElementById('tmdb-status');
        tmdbStatus.className = `badge ${tmdbData.available ? 'bg-success' : 'bg-warning'}`;
        tmdbStatus.textContent = tmdbData.available ? 'Доступен' : 'Не настроен';
    } catch (error) {
        console.error('Error checking system status:', error);
    }
}

async function updateStats() {
    try {
        const res = await fetch('/api/smart/stats');
        const data = await res.json();
        
        if (data.success) {
            document.getElementById('tmdb-cache-size').textContent = data.stats.tmdbCacheSize;
            document.getElementById('mediainfo-cache-size').textContent = data.stats.mediaInfoCacheSize;
        }
    } catch (error) {
        console.error('Error updating stats:', error);
    }
}

async function analyzeFile(e) {
    e.preventDefault();
    
    const filePath = document.getElementById('analyzeFilePath').value.trim();
    if (!filePath) return;
    
    const submitBtn = e.target.querySelector('button[type="submit"]');
    const originalText = submitBtn.textContent;
    submitBtn.textContent = 'Анализ...';
    submitBtn.disabled = true;
    
    try {
        const res = await fetch('/api/smart/analyze-file', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ filePath })
        });
        
        const data = await res.json();
        
        if (data.success) {
            displayAnalysisResult(data);
        } else {
            alert('Ошибка анализа: ' + data.error);
        }
    } catch (error) {
        alert('Ошибка сети: ' + error.message);
    } finally {
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
    }
}

function displayAnalysisResult(data) {
    const resultDiv = document.getElementById('analysisResult');
    const contentDiv = document.getElementById('analysisContent');
    
    let html = '<div class="row">';
    
    // Информация о файле
    html += '<div class="col-md-6"><h4>Информация о файле:</h4><ul>';
    html += `<li><strong>Имя:</strong> ${data.fileInfo.fileName}</li>`;
    html += `<li><strong>Расширение:</strong> ${data.fileInfo.extension}</li>`;
    html += `<li><strong>Размер:</strong> ${formatBytes(data.fileInfo.size)}</li>`;
    if (data.fileInfo.duration) {
        html += `<li><strong>Длительность:</strong> ${data.fileInfo.duration}</li>`;
    }
    if (data.fileInfo.resolution) {
        html += `<li><strong>Разрешение:</strong> ${data.fileInfo.resolution}</li>`;
    }
    if (data.fileInfo.quality) {
        html += `<li><strong>Качество:</strong> ${data.fileInfo.quality}</li>`;
    }
    html += '</ul></div>';
    
    // Информация о фильме
    if (data.movieInfo) {
        html += '<div class="col-md-6"><h4>Информация о фильме:</h4><ul>';
        html += `<li><strong>Название:</strong> ${data.movieInfo.title || 'Не определено'}</li>`;
        html += `<li><strong>Год:</strong> ${data.movieInfo.year || 'Не определен'}</li>`;
        if (data.movieInfo.tmdb) {
            html += `<li><strong>TMDB ID:</strong> ${data.movieInfo.tmdb.id}</li>`;
            html += `<li><strong>Рейтинг:</strong> ${data.movieInfo.tmdb.rating}/10</li>`;
        }
        html += '</ul></div>';
    }
    
    html += '</div>';
    
    contentDiv.innerHTML = html;
    resultDiv.style.display = 'block';
}

async function processFile(e) {
    e.preventDefault();
    
    const filePath = document.getElementById('processFilePath').value.trim();
    const template = document.getElementById('fileNameTemplate').value.trim();
    
    if (!filePath) return;
    
    const submitBtn = e.target.querySelector('button[type="submit"]');
    const originalText = submitBtn.textContent;
    submitBtn.textContent = 'Обработка...';
    submitBtn.disabled = true;
    
    try {
        const res = await fetch('/api/smart/process-file', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                filePath, 
                options: { template } 
            })
        });
        
        const data = await res.json();
        
        if (data.success) {
            displayProcessingResult(data);
        } else {
            alert('Ошибка обработки: ' + data.error);
        }
    } catch (error) {
        alert('Ошибка сети: ' + error.message);
    } finally {
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
    }
}

function displayProcessingResult(data) {
    const resultDiv = document.getElementById('processingResult');
    const contentDiv = document.getElementById('processingContent');
    
    let html = '<div class="alert alert-success">';
    html += '<h4>Файл успешно обработан!</h4>';
    html += `<p><strong>Исходный путь:</strong> ${data.originalPath}</p>`;
    html += `<p><strong>Новый путь:</strong> ${data.newPath}</p>`;
    
    if (data.movieInfo) {
        html += '<h5>Информация о фильме:</h5>';
        html += `<p><strong>Название:</strong> ${data.movieInfo.title}</p>`;
        html += `<p><strong>Год:</strong> ${data.movieInfo.year}</p>`;
        html += `<p><strong>Рейтинг:</strong> ${data.movieInfo.rating}/10</p>`;
        if (data.movieInfo.genres) {
            html += `<p><strong>Жанры:</strong> ${data.movieInfo.genres.join(', ')}</p>`;
        }
    }
    
    html += '</div>';
    
    contentDiv.innerHTML = html;
    resultDiv.style.display = 'block';
}

async function processDirectory() {
    const filePath = document.getElementById('processFilePath').value.trim();
    const template = document.getElementById('fileNameTemplate').value.trim();
    
    if (!filePath) {
        alert('Укажите путь к папке');
        return;
    }
    
    if (!confirm('Обработать все видео файлы в папке? Это может занять много времени.')) {
        return;
    }
    
    const btn = document.getElementById('processDirectoryBtn');
    const originalText = btn.textContent;
    btn.textContent = 'Запуск...';
    btn.disabled = true;
    
    try {
        const res = await fetch('/api/smart/process-directory', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                directoryPath: filePath, 
                options: { template } 
            })
        });
        
        const data = await res.json();
        
        if (data.success) {
            alert('Обработка папки запущена в фоновом режиме. Проверяйте статус ниже.');
        } else {
            alert('Ошибка запуска обработки: ' + data.error);
        }
    } catch (error) {
        alert('Ошибка сети: ' + error.message);
    } finally {
        btn.textContent = originalText;
        btn.disabled = false;
    }
}

async function searchMovie(e) {
    e.preventDefault();
    
    const query = document.getElementById('movieQuery').value.trim();
    const year = document.getElementById('movieYear').value.trim();
    
    if (!query) return;
    
    const submitBtn = e.target.querySelector('button[type="submit"]');
    const originalText = submitBtn.textContent;
    submitBtn.textContent = 'Поиск...';
    submitBtn.disabled = true;
    
    try {
        const res = await fetch('/api/smart/search-movie', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                query, 
                year: year ? parseInt(year) : null 
            })
        });
        
        const data = await res.json();
        
        if (data.success) {
            displaySearchResult(data.movie);
        } else {
            alert('Фильм не найден: ' + data.error);
        }
    } catch (error) {
        alert('Ошибка сети: ' + error.message);
    } finally {
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
    }
}

function displaySearchResult(movie) {
    const resultDiv = document.getElementById('searchResult');
    const contentDiv = document.getElementById('searchContent');
    
    let html = '<div class="row">';
    html += '<div class="col-md-8">';
    html += `<h4>${movie.title} (${movie.year})</h4>`;
    html += `<p><strong>Рейтинг:</strong> ${movie.rating}/10</p>`;
    html += `<p><strong>Жанры:</strong> ${movie.genres ? movie.genres.join(', ') : 'Не указаны'}</p>`;
    html += `<p><strong>Длительность:</strong> ${movie.runtime ? movie.runtime + ' мин' : 'Не указана'}</p>`;
    if (movie.director) {
        html += `<p><strong>Режиссер:</strong> ${movie.director}</p>`;
    }
    if (movie.cast) {
        html += `<p><strong>В ролях:</strong> ${movie.cast.join(', ')}</p>`;
    }
    html += `<p><strong>Описание:</strong> ${movie.overview || 'Описание отсутствует'}</p>`;
    html += '</div>';
    
    if (movie.poster_path) {
        html += '<div class="col-md-4">';
        html += `<img src="https://image.tmdb.org/t/p/w200${movie.poster_path}" class="img-fluid rounded" alt="Постер">`;
        html += '</div>';
    }
    
    html += '</div>';
    
    contentDiv.innerHTML = html;
    resultDiv.style.display = 'block';
}

async function refreshStatus() {
    try {
        const res = await fetch('/api/smart/status');
        const data = await res.json();
        
        const statusDiv = document.getElementById('processingStatus');
        
        if (data.success && data.status && data.status.length > 0) {
            let html = '<div class="table-responsive"><table class="table table-sm">';
            html += '<thead><tr><th>Файл</th><th>Статус</th><th>Время</th></tr></thead><tbody>';
            
            data.status.forEach(item => {
                const statusClass = item.status === 'completed' ? 'success' : 
                                  item.status === 'failed' ? 'danger' : 'warning';
                const statusText = item.status === 'completed' ? 'Завершено' :
                                 item.status === 'failed' ? 'Ошибка' : 'Обработка';
                
                html += `<tr>`;
                html += `<td>${path.basename(item.filePath)}</td>`;
                html += `<td><span class="badge bg-${statusClass}">${statusText}</span></td>`;
                html += `<td>${new Date(item.startTime).toLocaleTimeString()}</td>`;
                html += `</tr>`;
            });
            
            html += '</tbody></table></div>';
            statusDiv.innerHTML = html;
        } else {
            statusDiv.innerHTML = '<p class="text-muted mb-0">Нет активных задач обработки</p>';
        }
    } catch (error) {
        console.error('Error refreshing status:', error);
    }
}

async function clearCaches() {
    if (!confirm('Очистить все кэши? Это может замедлить работу системы.')) {
        return;
    }
    
    try {
        const res = await fetch('/api/smart/clear-caches', { method: 'POST' });
        const data = await res.json();
        
        if (data.success) {
            alert('Кэши очищены');
            updateStats();
        } else {
            alert('Ошибка очистки кэшей: ' + data.error);
        }
    } catch (error) {
        alert('Ошибка сети: ' + error.message);
    }
}

function clearAnalysis() {
    document.getElementById('analysisResult').style.display = 'none';
    document.getElementById('analyzeFilePath').value = '';
}

function formatBytes(bytes) {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}
</script>