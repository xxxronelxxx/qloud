const axios = require('axios');
const Settings = require('../models/SettingsModel');

class KinopoiskService {
    constructor() {
        this.baseURL = 'https://kinopoiskapiunofficial.tech/api/v2.1/films';
        this.cache = new Map();
        this.cacheTimeout = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞ Kinopoisk
    getApiKey() {
        const settings = Settings.readConfig();
        return settings.kinopoiskApiKey || process.env.KINOPOISK_API_KEY || '';
    }

    // –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
    async searchMovies(query, year = null) {
        try {
            const apiKey = this.getApiKey();
            if (!apiKey) {
                console.warn('Kinopoisk API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
                return null;
            }

            console.log(`üîç –ü–æ–∏—Å–∫ –≤ Kinopoisk: "${query}"${year ? ` (${year})` : ''}`);

            const cacheKey = `kinopoisk_search_${query}_${year}`;
            const cached = this.cache.get(cacheKey);
            
            if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
                console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ');
                return cached.data;
            }

            const params = {
                keyword: query
            };

            if (year) {
                params.yearFrom = year;
                params.yearTo = year;
            }

            const response = await this.makeRequest(`${this.baseURL}/search-by-keyword`, params);
            
            if (response.data.films && response.data.films.length > 0) {
                const film = response.data.films[0];
                console.log(`üé¨ –ù–∞–π–¥–µ–Ω –≤ Kinopoisk: ${film.nameRu || film.nameEn} (${film.year})`);
                
                // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                const details = await this.getMovieDetails(film.filmId);
                
                if (details) {
                    this.cache.set(cacheKey, {
                        data: details,
                        timestamp: Date.now()
                    });
                    return details;
                }
            }

            console.log('‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Kinopoisk');
            return null;

        } catch (error) {
            console.error('üí• Kinopoisk Search Error:', error.message);
            return null;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ
    async getMovieDetails(filmId) {
        try {
            const apiKey = this.getApiKey();
            if (!apiKey) return null;

            console.log(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ñ–∏–ª—å–º–∞ Kinopoisk ID: ${filmId}`);

            const cacheKey = `kinopoisk_details_${filmId}`;
            const cached = this.cache.get(cacheKey);
            
            if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
                return cached.data;
            }

            const response = await this.makeRequest(`${this.baseURL}/${filmId}`);
            const film = response.data;

            const result = {
                id: film.kinopoiskId,
                title: film.nameRu || film.nameEn,
                original_title: film.nameEn || film.nameRu,
                year: film.year,
                rating: film.ratingKinopoisk || film.ratingImdb,
                overview: film.description,
                genres: film.genres?.map(g => g.genre) || [],
                runtime: film.filmLength,
                poster_path: film.posterUrl,
                backdrop_path: film.coverUrl,
                release_date: `${film.year}-01-01`,
                budget: null,
                revenue: null,
                director: film.director,
                cast: film.actors?.split(', ') || [],
                production_companies: [],
                tagline: film.slogan,
                status: 'Released',
                original_language: film.countries?.some(c => c.country === '–†–æ—Å—Å–∏—è') ? 'ru' : 'en',
                is_russian: film.countries?.some(c => c.country === '–†–æ—Å—Å–∏—è') || false,
                is_translation: false,
                type: film.type === 'FILM' ? 'movie' : 'series',
                episodes: film.serial ? film.serial.length : null,
                source: 'kinopoisk',
                kinopoisk_rating: film.ratingKinopoisk,
                imdb_rating: film.ratingImdb
            };

            console.log(`üé¨ –û–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–µ—Ç–∞–ª–∏: ${result.title} (${result.year})`);

            this.cache.set(cacheKey, {
                data: result,
                timestamp: Date.now()
            });

            return result;
        } catch (error) {
            console.error('üí• Kinopoisk Details Error:', error.message);
            return null;
        }
    }

    // –ü–æ–∏—Å–∫ —Ç–æ–ø —Ñ–∏–ª—å–º–æ–≤
    async getTopMovies(type = 'TOP_250_BEST_FILMS') {
        try {
            const apiKey = this.getApiKey();
            if (!apiKey) return [];

            const response = await this.makeRequest(`${this.baseURL}/top`, { type });
            return response.data.films || [];
        } catch (error) {
            console.error('üí• Kinopoisk Top Movies Error:', error.message);
            return [];
        }
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
    async makeRequest(url, params = {}) {
        try {
            const apiKey = this.getApiKey();
            const response = await axios.get(url, { 
                params,
                headers: {
                    'X-API-KEY': apiKey,
                    'Content-Type': 'application/json'
                }
            });
            return response;
        } catch (error) {
            console.error(`Kinopoisk HTTP Request Error: ${error.message}`);
            throw error;
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
    clearCache() {
        this.cache.clear();
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞
    getCacheSize() {
        return this.cache.size;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    getStats() {
        return {
            cacheSize: this.cache.size,
            cacheTimeout: this.cacheTimeout,
            apiKeyConfigured: !!this.getApiKey()
        };
    }
}

module.exports = new KinopoiskService();