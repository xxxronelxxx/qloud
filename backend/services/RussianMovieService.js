const axios = require('axios');
const cheerio = require('cheerio');
const Settings = require('../models/SettingsModel');

class RussianMovieService {
    constructor() {
        this.baseURL = 'https://api.themoviedb.org/3';
        this.cache = new Map();
        this.cacheTimeout = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
        
        // –†—É—Å—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        this.sources = {
            kinopoisk: 'https://kinopoisk.ru',
            kinozal: 'https://kinozal.tv',
            rutracker: 'https://rutracker.org'
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞ TMDB
    getApiKey() {
        const settings = Settings.readConfig();
        return settings.tmdbApiKey || process.env.TMDB_API_KEY || '';
    }

    // –ü–æ–∏—Å–∫ —Ä—É—Å—Å–∫–∏—Ö —Ñ–∏–ª—å–º–æ–≤ —á–µ—Ä–µ–∑ TMDB —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    async searchRussianMovies(query, year = null) {
        try {
            const apiKey = this.getApiKey();
            if (!apiKey) {
                console.warn('TMDB API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
                return null;
            }

            console.log(`üîç –ü–æ–∏—Å–∫ —Ä—É—Å—Å–∫–∏—Ö —Ñ–∏–ª—å–º–æ–≤: "${query}"${year ? ` (${year})` : ''}`);

            const cacheKey = `russian_movie_${query}_${year}`;
            const cached = this.cache.get(cacheKey);
            
            if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
                console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ');
                return cached.data;
            }

            // –ü–æ–∏—Å–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            let params = {
                api_key: apiKey,
                query: query,
                language: 'ru-RU',
                include_adult: false,
                region: 'RU' // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Ñ–∏–ª—å–º–∞–º
            };

            if (year) {
                params.year = year;
            }

            console.log(`üåê –ó–∞–ø—Ä–æ—Å –∫ TMDB API –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö —Ñ–∏–ª—å–º–æ–≤`);
            
            const response = await this.makeRequest(`${this.baseURL}/search/movie`, params);
            
            if (response.data.results && response.data.results.length > 0) {
                // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö —Ñ–∏–ª—å–º–æ–≤
                const russianMovies = response.data.results.filter(movie => {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —è–∑—ã–∫ —Ñ–∏–ª—å–º–∞
                    const isRussianOriginal = movie.original_language === 'ru';
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
                    const isRussianProduction = movie.origin_country && 
                        movie.origin_country.some(country => country === 'RU');
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ
                    const hasRussianTitle = /[–∞-—è—ë]/i.test(movie.title) || 
                                          /[–∞-—è—ë]/i.test(movie.original_title);
                    
                    return isRussianOriginal || isRussianProduction || hasRussianTitle;
                });

                if (russianMovies.length > 0) {
                    const movie = russianMovies[0];
                    console.log(`üé¨ –ù–∞–π–¥–µ–Ω —Ä—É—Å—Å–∫–∏–π —Ñ–∏–ª—å–º: ${movie.title} (${movie.release_date})`);
                    
                    const details = await this.getRussianMovieDetails(movie.id);
                    
                    if (details) {
                        this.cache.set(cacheKey, {
                            data: details,
                            timestamp: Date.now()
                        });
                        return details;
                    }
                }
            }

            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä—É—Å—Å–∫–∏—Ö —Ñ–∏–ª—å–º–æ–≤, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ —Å —Ä—É—Å—Å–∫–∏–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
            return await this.searchWithRussianTranslation(query, year);
            
        } catch (error) {
            console.error('üí• Russian Movie Search Error:', error.message);
            return null;
        }
    }

    // –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ —Å —Ä—É—Å—Å–∫–∏–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
    async searchWithRussianTranslation(query, year = null) {
        try {
            const apiKey = this.getApiKey();
            if (!apiKey) return null;

            console.log(`üîç –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ —Å —Ä—É—Å—Å–∫–∏–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏: "${query}"`);

            // –ü–æ–∏—Å–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
            let params = {
                api_key: apiKey,
                query: query,
                language: 'ru-RU',
                include_adult: false
            };

            if (year) {
                params.year = year;
            }

            const response = await this.makeRequest(`${this.baseURL}/search/movie`, params);
            
            if (response.data.results && response.data.results.length > 0) {
                const movie = response.data.results[0];
                console.log(`üé¨ –ù–∞–π–¥–µ–Ω —Ñ–∏–ª—å–º —Å —Ä—É—Å—Å–∫–∏–º –ø–µ—Ä–µ–≤–æ–¥–æ–º: ${movie.title}`);
                
                const details = await this.getRussianMovieDetails(movie.id, true);
                
                if (details) {
                    return details;
                }
            }

            return null;
        } catch (error) {
            console.error('üí• Russian Translation Search Error:', error.message);
            return null;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ä—É—Å—Å–∫–æ–≥–æ —Ñ–∏–ª—å–º–∞
    async getRussianMovieDetails(movieId, isTranslation = false) {
        try {
            const apiKey = this.getApiKey();
            if (!apiKey) return null;

            console.log(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ä—É—Å—Å–∫–æ–≥–æ —Ñ–∏–ª—å–º–∞ ID: ${movieId}`);

            const cacheKey = `russian_details_${movieId}_${isTranslation}`;
            const cached = this.cache.get(cacheKey);
            
            if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
                return cached.data;
            }

            // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            const params = {
                api_key: apiKey,
                language: 'ru-RU',
                append_to_response: 'credits,genres,release_dates'
            };

            const response = await this.makeRequest(`${this.baseURL}/movie/${movieId}`, params);
            const movie = response.data;

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ª–∏–∑–∞—Ö –≤ –†–æ—Å—Å–∏–∏
            const russianRelease = movie.release_dates?.results?.find(r => r.iso_3166_1 === 'RU');
            const russianRating = russianRelease?.release_dates?.[0]?.certification;

            const result = {
                id: movie.id,
                title: movie.title,
                original_title: movie.original_title,
                year: new Date(movie.release_date).getFullYear(),
                rating: movie.vote_average,
                overview: movie.overview,
                genres: movie.genres.map(g => g.name),
                runtime: movie.runtime,
                poster_path: movie.poster_path,
                backdrop_path: movie.backdrop_path,
                release_date: movie.release_date,
                budget: movie.budget,
                revenue: movie.revenue,
                director: this.translateName(movie.credits?.crew?.find(c => c.job === 'Director')?.name),
                cast: movie.credits?.cast?.slice(0, 10).map(a => this.translateName(a.name)),
                production_companies: movie.production_companies?.map(c => c.name),
                tagline: movie.tagline,
                status: movie.status,
                original_language: movie.original_language,
                is_russian: movie.original_language === 'ru',
                russian_rating: russianRating,
                is_translation: isTranslation
            };

            console.log(`üé¨ –û–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–µ—Ç–∞–ª–∏: ${result.title} (${result.year})`);

            this.cache.set(cacheKey, {
                data: result,
                timestamp: Date.now()
            });

            return result;
        } catch (error) {
            console.error('üí• Russian Movie Details Error:', error.message);
            return null;
        }
    }

    // –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Kinopoisk (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫)
    async searchKinopoisk(query) {
        try {
            console.log(`üîç –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Kinopoisk: "${query}"`);
            
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Kinopoisk API
            // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            return null;
        } catch (error) {
            console.error('üí• Kinopoisk Search Error:', error.message);
            return null;
        }
    }

    // –ü–µ—Ä–µ–≤–æ–¥ –∏–º–µ–Ω –∞–∫—Ç–µ—Ä–æ–≤ –∏ —Ä–µ–∂–∏—Å—Å–µ—Ä–æ–≤
    translateName(name) {
        if (!name) return name;
        
        // –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –∞–∫—Ç–µ—Ä–æ–≤
        const russianActors = {
            '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –•–∞–±–µ–Ω—Å–∫–∏–π': '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –•–∞–±–µ–Ω—Å–∫–∏–π',
            '–°–µ—Ä–≥–µ–π –ë–µ–∑—Ä—É–∫–æ–≤': '–°–µ—Ä–≥–µ–π –ë–µ–∑—Ä—É–∫–æ–≤',
            '–í–ª–∞–¥–∏–º–∏—Ä –ú–∞—à–∫–æ–≤': '–í–ª–∞–¥–∏–º–∏—Ä –ú–∞—à–∫–æ–≤',
            '–ï–≤–≥–µ–Ω–∏–π –ú–∏—Ä–æ–Ω–æ–≤': '–ï–≤–≥–µ–Ω–∏–π –ú–∏—Ä–æ–Ω–æ–≤',
            '–ê–ª–µ–∫—Å–µ–π –°–µ—Ä–µ–±—Ä—è–∫–æ–≤': '–ê–ª–µ–∫—Å–µ–π –°–µ—Ä–µ–±—Ä—è–∫–æ–≤',
            '–î–º–∏—Ç—Ä–∏–π –ù–∞–≥–∏–µ–≤': '–î–º–∏—Ç—Ä–∏–π –ù–∞–≥–∏–µ–≤',
            '–ú–∏—Ö–∞–∏–ª –ü–æ—Ä–µ—á–µ–Ω–∫–æ–≤': '–ú–∏—Ö–∞–∏–ª –ü–æ—Ä–µ—á–µ–Ω–∫–æ–≤',
            '–ê–Ω–¥—Ä–µ–π –ú–µ—Ä–∑–ª–∏–∫–∏–Ω': '–ê–Ω–¥—Ä–µ–π –ú–µ—Ä–∑–ª–∏–∫–∏–Ω',
            '–°–µ—Ä–≥–µ–π –ì–∞—Ä–º–∞—à': '–°–µ—Ä–≥–µ–π –ì–∞—Ä–º–∞—à',
            '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë–∞–ª—É–µ–≤': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë–∞–ª—É–µ–≤'
        };

        // –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö —Ä–µ–∂–∏—Å—Å–µ—Ä–æ–≤
        const russianDirectors = {
            '–ê–Ω–¥—Ä–µ–π –¢–∞—Ä–∫–æ–≤—Å–∫–∏–π': '–ê–Ω–¥—Ä–µ–π –¢–∞—Ä–∫–æ–≤—Å–∫–∏–π',
            '–°–µ—Ä–≥–µ–π –≠–π–∑–µ–Ω—à—Ç–µ–π–Ω': '–°–µ—Ä–≥–µ–π –≠–π–∑–µ–Ω—à—Ç–µ–π–Ω',
            '–ê–ª–µ–∫—Å–µ–π –ì–µ—Ä–º–∞–Ω': '–ê–ª–µ–∫—Å–µ–π –ì–µ—Ä–º–∞–Ω',
            '–ù–∏–∫–∏—Ç–∞ –ú–∏—Ö–∞–ª–∫–æ–≤': '–ù–∏–∫–∏—Ç–∞ –ú–∏—Ö–∞–ª–∫–æ–≤',
            '–ê–Ω–¥—Ä–µ–π –ó–≤—è–≥–∏–Ω—Ü–µ–≤': '–ê–Ω–¥—Ä–µ–π –ó–≤—è–≥–∏–Ω—Ü–µ–≤',
            '–ö–∏—Ä–∏–ª–ª –°–µ—Ä–µ–±—Ä–µ–Ω–Ω–∏–∫–æ–≤': '–ö–∏—Ä–∏–ª–ª –°–µ—Ä–µ–±—Ä–µ–Ω–Ω–∏–∫–æ–≤',
            '–ê–ª–µ–∫—Å–µ–π –ü–æ–ø–æ–≥—Ä–µ–±—Å–∫–∏–π': '–ê–ª–µ–∫—Å–µ–π –ü–æ–ø–æ–≥—Ä–µ–±—Å–∫–∏–π',
            '–í–∞–ª–µ—Ä–∏–π –¢–æ–¥–æ—Ä–æ–≤—Å–∫–∏–π': '–í–∞–ª–µ—Ä–∏–π –¢–æ–¥–æ—Ä–æ–≤—Å–∫–∏–π',
            '–§–µ–¥–æ—Ä –ë–æ–Ω–¥–∞—Ä—á—É–∫': '–§–µ–¥–æ—Ä –ë–æ–Ω–¥–∞—Ä—á—É–∫',
            '–¢–∏–º—É—Ä –ë–µ–∫–º–∞–º–±–µ—Ç–æ–≤': '–¢–∏–º—É—Ä –ë–µ–∫–º–∞–º–±–µ—Ç–æ–≤'
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if (russianActors[name] || russianDirectors[name]) {
            return russianActors[name] || russianDirectors[name];
        }

        // –ï—Å–ª–∏ –∏–º—è —É–∂–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if (/[–∞-—è—ë]/i.test(name)) {
            return name;
        }

        // –î–ª—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –∏–º–µ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ª–æ–≤–∞—Ä—å
        const foreignTranslations = {
            'Tom Hanks': '–¢–æ–º –•—ç–Ω–∫—Å',
            'Leonardo DiCaprio': '–õ–µ–æ–Ω–∞—Ä–¥–æ –î–∏–ö–∞–ø—Ä–∏–æ',
            'Brad Pitt': '–ë—Ä—ç–¥ –ü–∏—Ç—Ç',
            'Christopher Nolan': '–ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä –ù–æ–ª–∞–Ω',
            'Steven Spielberg': '–°—Ç–∏–≤–µ–Ω –°–ø–∏–ª–±–µ—Ä–≥'
        };

        return foreignTranslations[name] || name;
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
    async makeRequest(url, params = {}) {
        try {
            const response = await axios.get(url, { params });
            return response;
        } catch (error) {
            console.error(`HTTP Request Error: ${error.message}`);
            throw error;
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
    clearCache() {
        this.cache.clear();
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞
    getCacheSize() {
        return this.cache.size;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    getStats() {
        return {
            cacheSize: this.cache.size,
            cacheTimeout: this.cacheTimeout,
            sources: Object.keys(this.sources)
        };
    }
}

module.exports = new RussianMovieService();