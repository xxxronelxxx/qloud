const https = require('https');
const { URL } = require('url');
const Settings = require('../models/SettingsModel');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTPS –∑–∞–ø—Ä–æ—Å–æ–≤
function makeHttpsRequest(url, params = {}) {
    return new Promise((resolve, reject) => {
        const urlObj = new URL(url);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ URL
        Object.keys(params).forEach(key => {
            urlObj.searchParams.append(key, params[key]);
        });
        
        console.log(`üåê –í—ã–ø–æ–ª–Ω—è–µ–º HTTPS –∑–∞–ø—Ä–æ—Å: ${urlObj.toString()}`);
        
        const options = {
            hostname: urlObj.hostname,
            port: urlObj.port || 443,
            path: urlObj.pathname + urlObj.search,
            method: 'GET',
            headers: {
                'User-Agent': 'Qloud/1.0',
                'Accept': 'application/json'
            }
        };
        
        const req = https.request(options, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
                data += chunk;
            });
            
            res.on('end', () => {
                console.log(`‚úÖ HTTPS –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, —Å—Ç–∞—Ç—É—Å: ${res.statusCode}`);
                try {
                    const jsonData = JSON.parse(data);
                    resolve({ status: res.statusCode, data: jsonData });
                } catch (error) {
                    reject(new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${error.message}`));
                }
            });
        });
        
        req.on('error', (error) => {
            console.error(`üí• HTTPS –æ—à–∏–±–∫–∞: ${error.message}`);
            reject(error);
        });
        
        req.setTimeout(10000, () => {
            req.destroy();
            reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞'));
        });
        
        req.end();
    });
}

class TMDBService {
    constructor() {
        this.baseURL = 'https://api.themoviedb.org/3';
        
        // –ö—ç—à –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        this.cache = new Map();
        this.cacheTimeout = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    getApiKey() {
        const settings = Settings.readConfig();
        return settings.tmdbApiKey || process.env.TMDB_API_KEY || '';
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    isApiAvailable() {
        return !!this.getApiKey();
    }

    // –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    async searchMovie(query, year = null) {
        try {
            const apiKey = this.getApiKey();
            if (!apiKey) {
                console.warn('TMDB API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
                return null;
            }

            console.log(`üîç –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞: "${query}"${year ? ` (${year})` : ''}`);

            const cacheKey = `movie_${query}_${year}`;
            const cached = this.cache.get(cacheKey);
            
            if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
                console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ');
                return cached.data;
            }

            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            let params = {
                api_key: apiKey,
                query: query,
                language: 'ru-RU',
                include_adult: false
            };

            if (year) {
                params.year = year;
            }

            console.log(`üåê –ó–∞–ø—Ä–æ—Å –∫ TMDB API: ${this.baseURL}/search/movie`);
            console.log(`üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:`, params);

            let response = await makeHttpsRequest(`${this.baseURL}/search/movie`, params);
            
            console.log(`‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, —Å—Ç–∞—Ç—É—Å: ${response.status}`);
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –ø—Ä–æ–±—É–µ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
            if (!response.data.results || response.data.results.length === 0) {
                console.log('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –ø—Ä–æ–±—É–µ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º...');
                params.language = 'en-US';
                response = await makeHttpsRequest(`${this.baseURL}/search/movie`, params);
            }
            
            if (response.data.results && response.data.results.length > 0) {
                const movie = response.data.results[0];
                console.log(`üé¨ –ù–∞–π–¥–µ–Ω —Ñ–∏–ª—å–º: ${movie.title} (${movie.release_date})`);
                
                // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ
                const details = await this.getMovieDetails(movie.id);
                
                if (details) {
                    // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    this.cache.set(cacheKey, {
                        data: details,
                        timestamp: Date.now()
                    });
                    return details;
                }
            } else {
                console.log('‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            return null;
        } catch (error) {
            console.error('üí• TMDB API Error:', error.message);
            if (error.code) {
                console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
            }
            if (error.response) {
                console.error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.status, error.response.data);
            }
            return null;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ
    async getMovieDetails(movieId) {
        try {
            const apiKey = this.getApiKey();
            if (!apiKey) {
                console.warn('TMDB API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
                return null;
            }

            console.log(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ñ–∏–ª—å–º–∞ ID: ${movieId}`);

            const cacheKey = `movie_details_${movieId}`;
            const cached = this.cache.get(cacheKey);
            
            if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
                console.log('üìã –î–µ—Ç–∞–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫—ç—à–µ');
                return cached.data;
            }

            const params = {
                api_key: apiKey,
                language: 'ru-RU',
                append_to_response: 'credits,genres'
            };

            console.log(`üåê –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π: ${this.baseURL}/movie/${movieId}`);

            const response = await makeHttpsRequest(`${this.baseURL}/movie/${movieId}`, params);
            
            console.log(`‚úÖ –î–µ—Ç–∞–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã, —Å—Ç–∞—Ç—É—Å: ${response.status}`);
            
            const movie = response.data;

            const result = {
                id: movie.id,
                title: movie.title,
                original_title: movie.original_title,
                year: new Date(movie.release_date).getFullYear(),
                rating: movie.vote_average,
                overview: movie.overview,
                genres: movie.genres.map(g => g.name),
                runtime: movie.runtime,
                poster_path: movie.poster_path,
                backdrop_path: movie.backdrop_path,
                release_date: movie.release_date,
                budget: movie.budget,
                revenue: movie.revenue,
                director: movie.credits?.crew?.find(c => c.job === 'Director')?.name,
                cast: movie.credits?.cast?.slice(0, 10).map(a => a.name),
                production_companies: movie.production_companies?.map(c => c.name),
                tagline: movie.tagline,
                status: movie.status
            };

            console.log(`üé¨ –û–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–µ—Ç–∞–ª–∏: ${result.title} (${result.year})`);

            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.cache.set(cacheKey, {
                data: result,
                timestamp: Date.now()
            });

            return result;
        } catch (error) {
            console.error('üí• TMDB API Error (–¥–µ—Ç–∞–ª–∏):', error.message);
            if (error.code) {
                console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
            }
            if (error.response) {
                console.error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.status, error.response.data);
            }
            return null;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∂–∞–Ω—Ä–æ–≤
    async getGenres() {
        try {
            const apiKey = this.getApiKey();
            if (!apiKey) {
                console.warn('TMDB API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
                return [];
            }

            const cacheKey = 'genres';
            const cached = this.cache.get(cacheKey);
            
            if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
                return cached.data;
            }

            const params = {
                api_key: apiKey,
                language: 'ru-RU'
            };

            const response = await makeHttpsRequest(`${this.baseURL}/genre/movie/list`, params);
            
            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.cache.set(cacheKey, {
                data: response.data.genres,
                timestamp: Date.now()
            });

            return response.data.genres;
        } catch (error) {
            console.error('TMDB API Error:', error.message);
            return [];
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
    clearCache() {
        this.cache.clear();
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞
    getCacheSize() {
        return this.cache.size;
    }
}

module.exports = new TMDBService();