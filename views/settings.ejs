<% layout('layout') %>

<%- include("modules/header.ejs") %>

<main class="container-xxl py-4">
  <h1 class="h3 mb-4">Настройки</h1>

  <div class="row g-4">
    <div class="col-12 col-lg-6">
      <div class="card rounded-4">
        <div class="card-body">
          <h2 class="h5 mb-3">Смена пароля администратора</h2>
          <form id="changePassForm" class="d-grid gap-3">
            <div>
              <label class="form-label">Новый пароль</label>
              <input type="password" id="newPassword" class="form-control rounded-4" placeholder="Введите новый пароль" required>
            </div>
            <div class="d-flex gap-2">
              <button class="btn btn-primary rounded-4" type="submit">Сохранить</button>
              <button class="btn btn-outline-secondary rounded-4" type="button" id="toggleNew">Показать</button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <div class="col-12 col-lg-6">
      <div class="card rounded-4">
        <div class="card-body">
          <h2 class="h5 mb-3">Сброс пароля</h2>
          <p class="text-muted">Удалит текущий пароль и вернёт приложение к режиму регистрации.</p>
          <button id="resetPassBtn" class="btn btn-danger rounded-4">Сбросить пароль</button>
        </div>
      </div>
    </div>

    <div class="col-12">
      <div class="card rounded-4">
        <div class="card-body">
          <h2 class="h5 mb-3">Путь для сохранения файлов</h2>
          <form id="pathSettingsForm" class="d-grid gap-3">
            <div class="d-flex flex-wrap gap-3 align-items-center">
              <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" role="switch" id="useAppPathSwitch">
                <label class="form-check-label" for="useAppPathSwitch">Использовать папку приложения</label>
              </div>
            </div>
            <div id="customPathSection" style="display: none;">
              <label class="form-label">Кастомный путь</label>
              <div class="input-group">
                <input type="text" id="customPathInput" class="form-control rounded-4" placeholder="C:\Users\Username\Documents\Qloud">
                <button class="btn btn-outline-secondary rounded-4" type="button" id="browsePathBtn">Обзор</button>
              </div>
              <div class="form-text">Укажите полный путь к папке, где будут сохраняться файлы</div>
            </div>
            <div class="alert alert-info">
              <strong>Текущий путь:</strong> <span id="currentPathDisplay">Загрузка...</span>
            </div>
            <div class="alert alert-warning">
              <strong>При изменении пути будут мигрированы:</strong>
              <ul class="mb-0 mt-2">
                <li>Загруженные файлы (uploads/)</li>
                <li>Торрент файлы (torrents/)</li>
                <li>История чата (chat.json)</li>
                <li>Настройки (config.json)</li>
                <li>Пароль администратора (password.txt)</li>
              </ul>
            </div>
            <div>
              <button class="btn btn-success rounded-4" type="submit">Сохранить</button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <div class="col-12 col-lg-6">
      <div class="card rounded-4">
        <div class="card-body">
          <h2 class="h5 mb-3">Кэш статических файлов</h2>
          <div class="d-flex flex-wrap gap-3 align-items-center">
            <div class="form-check form-switch">
              <input class="form-check-input" type="checkbox" role="switch" id="cacheSwitch">
              <label class="form-check-label" for="cacheSwitch">Включить кэш</label>
            </div>
            <button class="btn btn-outline-warning rounded-4" id="invalidateCacheBtn">Очистить кэш</button>
            <span class="small text-muted" id="cacheVer"></span>
          </div>
        </div>
      </div>
    </div>

    <div class="col-12 col-lg-6">
      <div class="card rounded-4">
        <div class="card-body">
          <h2 class="h5 mb-3">История чата</h2>
          <form id="chatSettingsForm" class="d-grid gap-3">
            <div>
              <label class="form-label">Лимит сообщений</label>
              <input type="number" min="10" max="10000" step="10" id="chatLimit" class="form-control rounded-4" placeholder="Например, 100">
            </div>
            <div class="d-flex gap-2">
              <button class="btn btn-primary rounded-4" type="submit">Сохранить</button>
              <button class="btn btn-outline-danger rounded-4" type="button" id="clearChatBtn">Очистить историю</button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <div class="col-12 col-lg-6">
      <div class="card rounded-4">
        <div class="card-body">
          <h2 class="h5 mb-3">Настройки Kinozal.tv</h2>
          <form id="kinozalSettingsForm" class="d-grid gap-3">
            <div>
              <label class="form-label">Логин</label>
              <input type="text" id="kinozalLogin" class="form-control rounded-4" placeholder="Введите логин">
            </div>
            <div>
              <label class="form-label">Пароль</label>
              <div class="input-group">
                <input type="password" id="kinozalPassword" class="form-control rounded-4" placeholder="Введите пароль">
                <button class="btn btn-outline-secondary rounded-4" type="button" id="toggleKinozalPassword">Показать</button>
              </div>
            </div>
            <div class="d-flex gap-2">
              <button class="btn btn-primary rounded-4" type="submit">Сохранить</button>
              <button class="btn btn-outline-info rounded-4" type="button" id="testKinozalBtn">Проверить подключение</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <div class="row g-4 mt-1">
    <div class="col-12 col-lg-6">
      <div class="card rounded-4">
        <div class="card-body">
          <h2 class="h5 mb-3">Параметры интерфейса</h2>
          <form id="uiSettingsForm" class="d-grid gap-3">
            <div class="d-flex flex-wrap gap-3 align-items-center">
              <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" role="switch" id="themeSwitch">
                <label class="form-check-label" for="themeSwitch">Тёмная тема</label>
              </div>
              <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" role="switch" id="autorunSwitch">
                <label class="form-check-label" for="autorunSwitch">Автозапуск (Windows)</label>
              </div>
            </div>
            <div>
              <button class="btn btn-success rounded-4" type="submit">Сохранить</button>
            </div>
          </form>
        </div>
      </div>
    </div>
    <div class="col-12 col-lg-6">
      <div class="card rounded-4">
        <div class="card-body">
          <h2 class="h5 mb-3">О приложении</h2>
          <div class="text-muted small">
            Qloud — медиа‑сервер и файловый менеджер. Автор: Flash.
          </div>
        </div>
      </div>
    </div>
  </div>
</main>

<script>
  const asciiRe = /^[\x21-\x7E]+$/;

  const toggle = (input, btn) => {
    if (input.type === 'password') { input.type = 'text'; btn.textContent = 'Скрыть'; }
    else { input.type = 'password'; btn.textContent = 'Показать'; }
  }

  document.getElementById('toggleNew').addEventListener('click', () => toggle(document.getElementById('newPassword'), document.getElementById('toggleNew')));

  document.getElementById('changePassForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const newPassword = document.getElementById('newPassword').value.trim();
    if (!newPassword) return alert('Введите пароль');
    if (!asciiRe.test(newPassword)) return alert('Разрешены только латинские буквы, цифры и спецсимволы без пробелов');

    const res = await fetch('/auth-api/change-password', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ newPassword })
    });
    const data = await res.json();
    if (data.success) {
      alert('Пароль обновлён');
      document.getElementById('newPassword').value = '';
    } else {
      alert(data.msg || 'Ошибка обновления пароля');
    }
  });

  document.getElementById('resetPassBtn').addEventListener('click', async () => {
    if (!confirm('Вы уверены, что хотите сбросить пароль?')) return;
    const res = await fetch('/auth-api/reset-password', { method: 'POST' });
    const data = await res.json();
    if (data.success) {
      alert('Пароль сброшен. Сейчас вы будете перенаправлены на страницу регистрации.');
      window.location.href = '/auth';
    } else {
      alert(data.msg || 'Ошибка сброса пароля');
    }
  });

  // Bootstrap settings from API and wire up switches
  (async () => {
    try {
      const res = await fetch('/api/settings');
      const { config, currentPath } = await res.json();
      if (config) {
        // Path settings
        const useAppPathSwitch = document.getElementById('useAppPathSwitch');
        const customPathSection = document.getElementById('customPathSection');
        const customPathInput = document.getElementById('customPathInput');
        const currentPathDisplay = document.getElementById('currentPathDisplay');
        
        useAppPathSwitch.checked = config.useAppPath !== false;
        customPathInput.value = config.customPath || '';
        currentPathDisplay.textContent = currentPath || 'Неизвестно';
        
        // Показываем/скрываем секцию кастомного пути
        const toggleCustomPath = () => {
          customPathSection.style.display = useAppPathSwitch.checked ? 'none' : 'block';
        };
        toggleCustomPath();
        
        useAppPathSwitch.addEventListener('change', toggleCustomPath);
        
        // Обработка формы пути
        document.getElementById('pathSettingsForm').addEventListener('submit', async (e) => {
          e.preventDefault();
          const useAppPath = useAppPathSwitch.checked;
          const customPath = customPathInput.value.trim();
          
          if (!useAppPath && !customPath) {
            alert('Укажите кастомный путь или включите использование папки приложения');
            return;
          }
          
          // Показываем индикатор загрузки
          const submitBtn = e.target.querySelector('button[type="submit"]');
          const originalText = submitBtn.textContent;
          submitBtn.textContent = 'Миграция данных...';
          submitBtn.disabled = true;
          
          try {
            const res = await fetch('/api/settings', {
              method: 'PATCH',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ useAppPath, customPath: useAppPath ? null : customPath })
            });
            
            const data = await res.json();
            if (data.success) {
              currentPathDisplay.textContent = data.currentPath;
              alert('Путь сохранения обновлён и данные мигрированы успешно!');
              // Перезагружаем страницу для применения изменений
              setTimeout(() => window.location.reload(), 1000);
            } else {
              alert('Ошибка обновления пути: ' + (data.msg || 'Неизвестная ошибка'));
            }
          } catch (error) {
            alert('Ошибка сети: ' + error.message);
          } finally {
            // Восстанавливаем кнопку
            submitBtn.textContent = originalText;
            submitBtn.disabled = false;
          }
        });

        // Theme
        const isDark = config.theme === 'dark';
        const themeSwitch = document.getElementById('themeSwitch');
        themeSwitch.checked = isDark;
        const applyTheme = (t) => {
          document.documentElement.setAttribute('data-theme', t);
          document.documentElement.setAttribute('data-bs-theme', t);
          try { localStorage.setItem('qloud_theme', t); } catch(e) {}
        };
        applyTheme(isDark ? 'dark' : 'light');
        themeSwitch.onchange = (e) => {
          const theme = e.target.checked ? 'dark' : 'light';
          applyTheme(theme);
        };

        // Autorun (Windows)
        const autorunSwitch = document.getElementById('autorunSwitch');
        autorunSwitch.checked = !!config.autorun;
        autorunSwitch.onchange = async (e) => {
          const autorun = !!e.target.checked;
          await fetch('/api/settings', { method: 'PATCH', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ autorun }) });
          await fetch('/api/settings/autorun/apply', { method: 'POST' });
        };

        // Cache
        const cacheSwitch = document.getElementById('cacheSwitch');
        cacheSwitch.checked = !!config.cacheEnabled;
        document.getElementById('cacheVer').textContent = `Версия кэша: ${config.cacheVersion || 1}`;
        cacheSwitch.onchange = async (e) => {
          const cacheEnabled = !!e.target.checked;
          await fetch('/api/settings', { method: 'PATCH', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ cacheEnabled }) });
        };
        document.getElementById('invalidateCacheBtn').addEventListener('click', async () => {
          const r = await fetch('/api/settings/cache/invalidate', { method: 'POST' });
          const d = await r.json();
          if (d && d.success) {
            document.getElementById('cacheVer').textContent = `Версия кэша: ${d.config.cacheVersion}`;
            alert('Кэш обновлён. Обновите страницу (Ctrl+F5)');
          }
        });

        // Chat settings
        const chatLimit = document.getElementById('chatLimit');
        chatLimit.value = config.chatHistoryLimit || 100;
        document.getElementById('chatSettingsForm').addEventListener('submit', async (e) => {
          e.preventDefault();
          const val = parseInt(chatLimit.value, 10);
          if (!Number.isInteger(val) || val <= 0) return alert('Введите корректное число');
          await fetch('/api/settings', { method: 'PATCH', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ chatHistoryLimit: val }) });
          // попросим чат применить лимит
          try {
            const s = window.io && window.io();
            if (s) s.emit('chat:applyLimit');
          } catch(_) {}
          alert('Настройки чата сохранены');
        });

        document.getElementById('clearChatBtn').addEventListener('click', async () => {
          if (!confirm('Очистить всю историю чата?')) return;
          const r = await fetch('/api/settings/chat/clear', { method: 'POST' });
          const d = await r.json();
          if (d && d.success) alert('История чата очищена');
        });

        // Kinozal.tv настройки
        const kinozalLoginInput = document.getElementById('kinozalLogin');
        const kinozalPasswordInput = document.getElementById('kinozalPassword');
        const toggleKinozalPasswordBtn = document.getElementById('toggleKinozalPassword');
        const testKinozalBtn = document.getElementById('testKinozalBtn');
        const kinozalSettingsForm = document.getElementById('kinozalSettingsForm');

        console.log('Loading Kinozal settings...');
        console.log('Config kinozalLogin:', config.kinozalLogin ? 'Установлен' : 'Не установлен');
        console.log('kinozalLoginInput found:', !!kinozalLoginInput);
        console.log('kinozalSettingsForm found:', !!kinozalSettingsForm);
        
        // Обработчик показа/скрытия пароля
        if (toggleKinozalPasswordBtn) {
          toggleKinozalPasswordBtn.addEventListener('click', () => {
            toggle(kinozalPasswordInput, toggleKinozalPasswordBtn);
          });
        }
        
        if (kinozalLoginInput) {
            kinozalLoginInput.value = config.kinozalLogin || '';
            console.log('Login input value set to:', kinozalLoginInput.value ? 'Установлен' : 'Не установлен');
        }
        
        if (kinozalPasswordInput) {
            kinozalPasswordInput.value = config.kinozalPassword || '';
        }

        if (kinozalSettingsForm) {
            console.log('Adding submit listener to kinozalSettingsForm');
            kinozalSettingsForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                console.log('Kinozal form submitted');
                
                const login = kinozalLoginInput.value.trim();
                const password = kinozalPasswordInput.value.trim();
                
                if (!login) {
                    alert('Введите логин для Kinozal.tv');
                    return;
                }
                
                if (!password) {
                    alert('Введите пароль для Kinozal.tv');
                    return;
                }

                console.log('Sending API request...');
                const requestBody = { kinozalLogin: login, kinozalPassword: password };
                console.log('Request body:', requestBody);
                
                try {
                    const res = await fetch('/api/settings', {
                        method: 'PATCH',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(requestBody)
                    });
                    console.log('Response status:', res.status);
                    
                    const data = await res.json();
                    console.log('Response data:', data);
                    
                    if (data.success) {
                        alert('Настройки Kinozal.tv обновлены');
                        console.log('Success! New config:', data.config);
                    } else {
                        alert(data.msg || 'Ошибка обновления настроек');
                    }
                } catch (error) {
                    console.error('Fetch error:', error);
                    alert('Ошибка сети: ' + error.message);
                }
            });
        } else {
            console.error('kinozalSettingsForm not found');
        }

        testKinozalBtn.addEventListener('click', async () => {
          const login = kinozalLoginInput.value.trim();
          const password = kinozalPasswordInput.value.trim();
          
          if (!login || !password) {
            alert('Введите логин и пароль для проверки подключения');
            return;
          }
          
          try {
            console.log('Testing Kinozal connection...');
            const res = await fetch('/api/kinozal/test', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ login, password })
            });
            
            const data = await res.json();
            if (data.success) {
              alert('Подключение к Kinozal.tv успешно!');
            } else {
              alert(data.msg || 'Ошибка подключения к Kinozal.tv');
            }
          } catch (error) {
            console.error('Kinozal test error:', error);
            alert('Ошибка при проверке подключения: ' + error.message);
          }
        });
      }
    } catch (e) {}
  })();

  // Сохранение UI-настроек
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('uiSettingsForm');
    if (!form) return;
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const theme = document.getElementById('themeSwitch').checked ? 'dark' : 'light';
      const autorun = document.getElementById('autorunSwitch').checked;
      await fetch('/api/settings', { method: 'PATCH', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ theme, autorun }) });
      await fetch('/api/settings/autorun/apply', { method: 'POST' });
      alert('Настройки интерфейса сохранены');
    });
  });
</script>

