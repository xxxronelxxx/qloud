const axios = require('axios');
const cheerio = require('cheerio');

class RussianMoviesParser {
    constructor() {
        this.cache = new Map();
        this.cacheTimeout = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
    }

    // –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Rutor.info (—Ä—É—Å—Å–∫–∏–π —Ç–æ—Ä—Ä–µ–Ω—Ç-—Ç—Ä–µ–∫–µ—Ä)
    async searchRutor(query, year = null) {
        try {
            console.log(`üîç –ü–æ–∏—Å–∫ –≤ Rutor.info: "${query}"${year ? ` (${year})` : ''}`);

            const cacheKey = `rutor_search_${query}_${year}`;
            const cached = this.cache.get(cacheKey);
            
            if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
                console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ');
                return cached.data;
            }

            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
            const searchQueries = [
                query,
                query.toLowerCase(),
                query.replace(/[—ë]/g, '–µ'),
                query.replace(/[–µ]/g, '—ë')
            ];

            let allResults = [];

            for (const searchQuery of searchQueries) {
                try {
                    const searchUrl = `http://rutor.info/search/${encodeURIComponent(searchQuery)}`;
                    
                    const response = await axios.get(searchUrl, {
                        timeout: 15000,
                        headers: {
                            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                            'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
                            'Accept-Encoding': 'gzip, deflate',
                            'Connection': 'keep-alive'
                        }
                    });

                    const $ = cheerio.load(response.data);
                    const results = [];

                    // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                    $('tr.gai, tr.tum, tr').each((i, elem) => {
                        const $row = $(elem);
                        const $titleCell = $row.find('td.name, td:first-child');
                        const $titleLink = $titleCell.find('a');
                        
                        if ($titleLink.length > 0) {
                            const title = $titleLink.text().trim();
                            const size = $row.find('td.s, td:nth-child(2)').text().trim();
                            const date = $row.find('td.date, td:last-child').text().trim();
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≥–æ–¥—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
                            const titleLower = title.toLowerCase();
                            const queryLower = query.toLowerCase();
                            
                            if (titleLower.includes(queryLower) && 
                                (!year || title.includes(year.toString()))) {
                                results.push({
                                    title: title,
                                    size: size,
                                    date: date,
                                    source: 'rutor'
                                });
                            }
                        }
                    });

                    allResults = allResults.concat(results);
                    
                    if (results.length > 0) {
                        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è "${searchQuery}"`);
                        break; // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
                    }

                } catch (error) {
                    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ "${searchQuery}": ${error.message}`);
                    continue;
                }
            }

            // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            const uniqueResults = allResults.filter((item, index, self) => 
                index === self.findIndex(t => t.title === item.title)
            );

            if (uniqueResults.length > 0) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ Rutor: ${uniqueResults.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
                
                const result = {
                    title: uniqueResults[0].title,
                    year: year || this.extractYear(uniqueResults[0].title),
                    source: 'rutor',
                    results: uniqueResults,
                    is_russian: true
                };

                this.cache.set(cacheKey, {
                    data: result,
                    timestamp: Date.now()
                });

                return result;
            }

            console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Rutor');
            return null;

        } catch (error) {
            console.error('üí• Rutor Search Error:', error.message);
            return null;
        }
    }

    // –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ KinoPoisk (–ø–∞—Ä—Å–∏–Ω–≥)
    async searchKinopoiskWeb(query, year = null) {
        try {
            console.log(`üîç –ü–æ–∏—Å–∫ –≤ Kinopoisk (–ø–∞—Ä—Å–∏–Ω–≥): "${query}"${year ? ` (${year})` : ''}`);

            const cacheKey = `kinopoisk_web_search_${query}_${year}`;
            const cached = this.cache.get(cacheKey);
            
            if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
                console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ');
                return cached.data;
            }

            const searchUrl = `https://www.kinopoisk.ru/index.php?kp_query=${encodeURIComponent(query)}`;
            
            const response = await axios.get(searchUrl, {
                timeout: 15000,
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                    'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8'
                }
            });

            const $ = cheerio.load(response.data);
            const results = [];

            // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            $('.search_results .element').each((i, elem) => {
                const $elem = $(elem);
                const title = $elem.find('.name a').text().trim();
                const yearText = $elem.find('.year').text().trim();
                const rating = $elem.find('.rating').text().trim();
                const description = $elem.find('.descr').text().trim();
                
                const extractedYear = this.extractYear(yearText);
                
                if (!year || extractedYear === year) {
                    results.push({
                        title: title,
                        year: extractedYear,
                        rating: rating,
                        description: description,
                        source: 'kinopoisk_web'
                    });
                }
            });

            if (results.length > 0) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ Kinopoisk: ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
                
                const result = {
                    title: results[0].title,
                    year: results[0].year,
                    rating: results[0].rating,
                    description: results[0].description,
                    source: 'kinopoisk_web',
                    results: results,
                    is_russian: this.isRussianContent(results[0].title, results[0].description)
                };

                this.cache.set(cacheKey, {
                    data: result,
                    timestamp: Date.now()
                });

                return result;
            }

            console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Kinopoisk');
            return null;

        } catch (error) {
            console.error('üí• Kinopoisk Web Search Error:', error.message);
            return null;
        }
    }

    // –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ IMDb (–¥–ª—è —Ä—É—Å—Å–∫–∏—Ö —Ñ–∏–ª—å–º–æ–≤)
    async searchIMDb(query, year = null) {
        try {
            console.log(`üîç –ü–æ–∏—Å–∫ –≤ IMDb: "${query}"${year ? ` (${year})` : ''}`);

            const cacheKey = `imdb_search_${query}_${year}`;
            const cached = this.cache.get(cacheKey);
            
            if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
                console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ');
                return cached.data;
            }

            const searchUrl = `https://www.imdb.com/find?q=${encodeURIComponent(query)}&s=tt&ttype=ft,tv`;
            
            const response = await axios.get(searchUrl, {
                timeout: 15000,
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
            });

            const $ = cheerio.load(response.data);
            const results = [];

            // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            $('.find-result-item').each((i, elem) => {
                const $elem = $(elem);
                const title = $elem.find('.result_text a').text().trim();
                const yearText = $elem.find('.result_text').text().trim();
                const extractedYear = this.extractYear(yearText);
                
                if (!year || extractedYear === year) {
                    results.push({
                        title: title,
                        year: extractedYear,
                        source: 'imdb'
                    });
                }
            });

            if (results.length > 0) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ IMDb: ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
                
                const result = {
                    title: results[0].title,
                    year: results[0].year,
                    source: 'imdb',
                    results: results,
                    is_russian: this.isRussianTitle(results[0].title)
                };

                this.cache.set(cacheKey, {
                    data: result,
                    timestamp: Date.now()
                });

                return result;
            }

            console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ IMDb');
            return null;

        } catch (error) {
            console.error('üí• IMDb Search Error:', error.message);
            return null;
        }
    }

    // –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Nyaa.si (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–æ—Ä—Ä–µ–Ω—Ç-—Ç—Ä–µ–∫–µ—Ä)
    async searchNyaa(query, year = null) {
        try {
            console.log(`üîç –ü–æ–∏—Å–∫ –≤ Nyaa.si: "${query}"${year ? ` (${year})` : ''}`);

            const cacheKey = `nyaa_search_${query}_${year}`;
            const cached = this.cache.get(cacheKey);
            
            if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
                console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ');
                return cached.data;
            }

            const searchUrl = `https://nyaa.si/?f=0&c=0_0&q=${encodeURIComponent(query)}`;
            
            const response = await axios.get(searchUrl, {
                timeout: 15000,
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
            });

            const $ = cheerio.load(response.data);
            const results = [];

            // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            $('tbody tr').each((i, elem) => {
                const $row = $(elem);
                const $titleCell = $row.find('td:nth-child(2)');
                const $titleLink = $titleCell.find('a');
                
                if ($titleLink.length > 0) {
                    const title = $titleLink.text().trim();
                    const size = $row.find('td:nth-child(4)').text().trim();
                    const date = $row.find('td:nth-child(6)').text().trim();
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≥–æ–¥—É
                    if (!year || title.includes(year.toString())) {
                        results.push({
                            title: title,
                            size: size,
                            date: date,
                            source: 'nyaa'
                        });
                    }
                }
            });

            if (results.length > 0) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ Nyaa: ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
                
                const result = {
                    title: results[0].title,
                    year: year || this.extractYear(results[0].title),
                    source: 'nyaa',
                    results: results,
                    is_russian: this.isRussianTitle(results[0].title)
                };

                this.cache.set(cacheKey, {
                    data: result,
                    timestamp: Date.now()
                });

                return result;
            }

            console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Nyaa');
            return null;

        } catch (error) {
            console.error('üí• Nyaa Search Error:', error.message);
            return null;
        }
    }

    // –ú—É–ª—å—Ç–∏–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤—ã–π –ø–æ–∏—Å–∫
    async searchMultiSource(query, year = null) {
        console.log(`üîç –ú—É–ª—å—Ç–∏–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤—ã–π –ø–æ–∏—Å–∫: "${query}"${year ? ` (${year})` : ''}`);

        const results = [];

        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const promises = [
            this.searchRutor(query, year),
            this.searchKinopoiskWeb(query, year),
            this.searchIMDb(query, year),
            this.searchNyaa(query, year) // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –≤ Nyaa
        ];

        try {
            const searchResults = await Promise.allSettled(promises);
            
            searchResults.forEach((result, index) => {
                if (result.status === 'fulfilled' && result.value) {
                    results.push(result.value);
                }
            });

            if (results.length > 0) {
                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                results.sort((a, b) => {
                    const priority = { 'kinopoisk_web': 1, 'rutor': 2, 'imdb': 3, 'nyaa': 4 };
                    return (priority[a.source] || 999) - (priority[b.source] || 999);
                });

                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ ${results.length} –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö`);
                return results[0]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            }

            console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ');
            return null;

        } catch (error) {
            console.error('üí• Multi-source Search Error:', error.message);
            return null;
        }
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    extractYear(text) {
        if (!text) return null;
        const yearMatch = text.match(/\b(19|20)\d{2}\b/);
        return yearMatch ? parseInt(yearMatch[0]) : null;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —Ä—É—Å—Å–∫–∏–º
    isRussianContent(title, description = '') {
        const text = (title + ' ' + description).toLowerCase();
        return /[–∞-—è—ë]/i.test(text);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—É—Å—Å–∫–∏–º
    isRussianTitle(title) {
        return /[–∞-—è—ë]/i.test(title);
    }

    // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
    clearCache() {
        this.cache.clear();
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞
    getCacheSize() {
        return this.cache.size;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    getStats() {
        return {
            cacheSize: this.cache.size,
            cacheTimeout: this.cacheTimeout,
            sources: ['rutor', 'kinopoisk_web', 'imdb', 'nyaa']
        };
    }
}

module.exports = new RussianMoviesParser();