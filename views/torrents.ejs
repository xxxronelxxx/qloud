<% layout('layout') %>

<%- include("modules/header.ejs") %>

<main class="container-xxl py-4">
  <h1 class="h3 mb-3">–¢–æ—Ä—Ä–µ–Ω—Ç—ã</h1>

  <div class="row g-4">
    <!-- –ü–æ–∏—Å–∫ –Ω–∞ YTS.mx -->
    <div class="col-12">
      <div class="card rounded-4">
        <div class="card-body">
          <h2 class="h5 mb-3">–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤</h2>
          <form id="ytsSearchForm" class="d-grid gap-3">
            <div class="row">
              <div class="col-md-8">
                <input type="text" id="ytsSearchInput" class="form-control rounded-4" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞" required>
              </div>
              <div class="col-md-4">
                <button class="btn btn-primary rounded-4 w-100" type="submit">–ü–æ–∏—Å–∫</button>
              </div>
            </div>
          </form>
          
          <div id="ytsResults" class="mt-3" style="display: none;">
            <h3 class="h6">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</h3>
            <div id="ytsResultsList" class="d-flex flex-column gap-2"></div>
          </div>
          
          <div id="ytsFiles" class="mt-3" style="display: none;">
            <h3 class="h6">–§–∞–π–ª—ã —Ç–æ—Ä—Ä–µ–Ω—Ç–∞:</h3>
            <div id="ytsFilesList" class="d-flex flex-column gap-1"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤ -->
    <div class="col-12 col-lg-4">
      <div class="card rounded-4">
        <div class="card-body d-grid gap-3">
          <h2 class="h5 m-0">–î–æ–±–∞–≤–∏—Ç—å</h2>
          <form id="magnetForm" class="d-grid gap-2">
            <input class="form-control rounded-4" id="magnetInput" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ magnet-—Å—Å—ã–ª–∫—É"/>
            <button class="btn btn-primary rounded-4" type="submit">–î–æ–±–∞–≤–∏—Ç—å –ø–æ magnet</button>
          </form>
          <div class="text-center text-muted">–∏–ª–∏</div>
          <div id="dropZone" class="border rounded-4 p-4 text-center" style="border-style:dashed">
            –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ .torrent —Å—é–¥–∞
            <input id="fileInput" type="file" accept=".torrent" hidden />
            <div class="mt-2">
              <button class="btn btn-outline-secondary btn-sm rounded-4" id="chooseBtn" type="button">–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∑–æ–∫ -->
    <div class="col-12 col-lg-8">
      <div class="card rounded-4">
        <div class="card-body">
          <h2 class="h5">–ó–∞–≥—Ä—É–∑–∫–∏</h2>
          <div id="list" class="d-flex flex-column gap-3"></div>
        </div>
      </div>
    </div>
  </div>
  <!-- –ú–æ–¥–∞–ª –¥–µ—Ç–∞–ª–µ–π YTS -->
  <div class="modal fade" id="ytsDetailsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="ytsDetailsTitle">–î–µ—Ç–∞–ª–∏</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div id="ytsDetailsBody">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        </div>
      </div>
    </div>
  </div>
</main>

<script src="/socket.io/socket.io.js"></script>
<script>
  const listEl = document.getElementById('list');
  const socket = io();

  const fmtSize = (n) => {
    if (!n && n !== 0) return '';
    const units = ['B','KB','MB','GB','TB'];
    let i=0; let v=n;
    while (v>=1024 && i<units.length-1) { v/=1024; i++; }
    return v.toFixed(1)+' '+units[i];
  };

  function renderItem(t) {
    const id = 't_'+t.infoHash;
    let el = document.getElementById(id);
    
    // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if (!el) {
      el = document.createElement('div');
      el.id = id;
      el.className = 'p-3 rounded-4 border d-grid gap-2';
      el.innerHTML = `
        <div class="d-flex justify-content-between align-items-center">
          <div class="fw-medium text-truncate" title="${t.name||t.infoHash}">${t.name||t.infoHash}</div>
          <div class="d-flex gap-2">
            <button class="btn btn-outline-secondary btn-sm rounded-4" data-toggle="${t.paused ? 'resume' : 'pause'}">${t.paused ? '–ü—É—Å–∫' : '–ü–∞—É–∑–∞'}</button>
            <button class="btn btn-outline-warning btn-sm rounded-4" data-force-start="${t.infoHash}" title="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫">‚ö°</button>
            <button class="btn btn-outline-success btn-sm rounded-4" data-update-trackers="${t.infoHash}" title="–û–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä—ã">üîÑ</button>
            <button class="btn btn-outline-info btn-sm rounded-4" data-diagnose="${t.infoHash}" title="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞">üîç</button>
            <div class="btn-group">
              <button class="btn btn-outline-danger btn-sm rounded-4" data-remove="${t.infoHash}">–£–¥–∞–ª–∏—Ç—å</button>
              <button class="btn btn-outline-danger btn-sm rounded-4 dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false"></button>
              <ul class="dropdown-menu px-1 py-2 rounded-4" data-bs-theme="dark">
                <li><button class="dropdown-item rounded-4" data-remove-files="${t.infoHash}">–£–¥–∞–ª–∏—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏</button></li>
              </ul>
            </div>
          </div>
        </div>
        <div class="progress rounded-4" style="height: 18px;">
          <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%"></div>
        </div>
        <div class="d-flex justify-content-between small text-muted">
          <div><span data-prog>0</span>% ‚Ä¢ <span data-down>0</span> / <span data-len>0</span></div>
          <div>‚¨á <span data-ds>0</span>/s ‚Ä¢ ‚¨Ü <span data-us>0</span>/s ‚Ä¢ peers: <span data-p>0</span></div>
        </div>
        <div class="mt-2 d-flex flex-wrap gap-2" data-files></div>
        <div class="mt-1 small text-muted" data-status></div>
      `;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
      listEl.appendChild(el);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      el.querySelector('[data-remove]').onclick = async () => {
        const r = await fetch(`/torrents/api/${t.infoHash}`,{method:'DELETE'});
        const d = await r.json().catch(()=>({}));
        if (d && d.success) el.remove();
      };
      
      const removeFilesBtn = el.querySelector('[data-remove-files]');
      removeFilesBtn.onclick = async () => {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å —Ç–æ—Ä—Ä–µ–Ω—Ç –∏ –≤—Å–µ —Å–∫–∞—á–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?')) return;
        const r = await fetch(`/torrents/api/${t.infoHash}?deleteFiles=1`,{method:'DELETE'});
        const d = await r.json().catch(()=>({}));
        if (d && d.success) el.remove();
      };
      
      const toggleBtn = el.querySelector('[data-toggle]');
      toggleBtn.onclick = async () => {
        const action = toggleBtn.getAttribute('data-toggle');
        if (action === 'pause') {
          await fetch(`/torrents/api/${t.infoHash}/pause`, { method:'POST' });
        } else {
          await fetch(`/torrents/api/${t.infoHash}/resume`, { method:'POST' });
        }
      };
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
      const forceStartBtn = el.querySelector('[data-force-start]');
      forceStartBtn.onclick = async () => {
        try {
          const response = await fetch(`/torrents/api/${t.infoHash}/force-start`, { method:'POST' });
          const result = await response.json();
          if (result.success) {
            console.log('–¢–æ—Ä—Ä–µ–Ω—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—â–µ–Ω');
          } else {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:', result.msg);
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ:', error);
        }
      };
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      const diagnoseBtn = el.querySelector('[data-diagnose]');
      diagnoseBtn.onclick = async () => {
        try {
          const response = await fetch(`/torrents/api/${t.infoHash}/diagnose`);
          const result = await response.json();
          if (result.success) {
            console.log('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞:', result.diagnosis);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –∏–ª–∏ alert
            const diagnosisText = `
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞:
- –ù–∞–∑–≤–∞–Ω–∏–µ: ${result.diagnosis.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
- –ü—Ä–æ–≥—Ä–µ—Å—Å: ${result.diagnosis.progress}%
- –ü–∏—Ä—ã: ${result.diagnosis.numPeers}
- –°–∏–¥—ã: ${result.diagnosis.numSeeds}
- –õ–∏—á–∏: ${result.diagnosis.numLeeches}
- –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏: ${result.diagnosis.downloadSpeed || 0} B/s
- –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${result.diagnosis.hasMetadata ? '–ó–∞–≥—Ä—É–∂–µ–Ω—ã' : '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'}
- –§–∞–π–ª—ã: ${result.diagnosis.filesCount}
- –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: ${result.diagnosis.selectedFiles}
- –ö—É—Å–∫–∏: ${result.diagnosis.piecesCount}
- –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫—É—Å–∫–∏: ${result.diagnosis.selectedPieces}
- DHT: ${result.diagnosis.dht}
- LPD: ${result.diagnosis.lpd}
- –¢—Ä–µ–∫–µ—Ä—ã: ${result.diagnosis.trackers.length > 0 ? result.diagnosis.trackers.map(t => t.url).join(', ') : '–ù–µ—Ç'}
- –û—à–∏–±–∫–∞: ${result.diagnosis.error || '–ù–µ—Ç'}
            `;
            alert(diagnosisText);
          } else {
            console.error('–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', result.msg);
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:', error);
        }
      };
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–µ—Ä–æ–≤
      const updateTrackersBtn = el.querySelector('[data-update-trackers]');
      updateTrackersBtn.onclick = async () => {
        try {
          const response = await fetch(`/torrents/api/${t.infoHash}/update-trackers`, { method:'POST' });
          const result = await response.json();
          if (result.success) {
            console.log('–¢—Ä–µ–∫–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            const statusEl = el.querySelector('[data-status]');
            if (statusEl) {
              statusEl.textContent = 'üîÑ –¢—Ä–µ–∫–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã...';
              statusEl.className = 'mt-1 small text-info';
            }
          } else {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–µ—Ä–æ–≤:', result.msg);
            alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–µ—Ä–æ–≤: ' + result.msg);
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–µ—Ä–æ–≤:', error);
          alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–µ—Ä–æ–≤');
        }
      };
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞
    const bar = el.querySelector('.progress-bar');
    const prog = el.querySelector('[data-prog]');
    const down = el.querySelector('[data-down]');
    const len = el.querySelector('[data-len]');
    const ds = el.querySelector('[data-ds]');
    const us = el.querySelector('[data-us]');
    const p = el.querySelector('[data-p]');
    const files = el.querySelector('[data-files]');
    const toggleBtn = el.querySelector('[data-toggle]');
    const nameEl = el.querySelector('.fw-medium');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    if (nameEl) {
      const displayName = t.name || '–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...';
      nameEl.textContent = displayName;
      nameEl.title = displayName;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      if (displayName.includes('–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö')) {
        nameEl.classList.add('text-muted');
        nameEl.classList.add('fst-italic');
      } else {
        nameEl.classList.remove('text-muted');
        nameEl.classList.remove('fst-italic');
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–∞—É–∑–∞/–ø—É—Å–∫
    if (toggleBtn) {
      const paused = !!t.paused;
      toggleBtn.textContent = paused ? '–ü—É—Å–∫' : '–ü–∞—É–∑–∞';
      toggleBtn.setAttribute('data-toggle', paused ? 'resume' : 'pause');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    if (bar) {
      const progress = t.progress || 0;
      bar.style.width = progress + "%";
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      if (progress === 0 && t.name && t.name.includes('–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö')) {
        bar.classList.add('progress-bar-animated');
      } else {
        bar.classList.remove('progress-bar-animated');
      }
    }
    
    if (prog) prog.textContent = t.progress || 0;
    if (down) down.textContent = fmtSize(t.downloaded || 0);
    if (len) len.textContent = fmtSize(t.length || 0);
    if (ds) ds.textContent = fmtSize(t.downloadSpeed || 0);
    if (us) us.textContent = fmtSize(t.uploadSpeed || 0);
    if (p) p.textContent = t.numPeers || 0;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
    if (files) {
      files.innerHTML = '';
      if (!t.files || !t.files.length) {
        const span = document.createElement('span');
        span.className = 'text-muted small';
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if (t.name && t.name.includes('–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö')) {
          span.textContent = '–§–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (–∏–¥—ë—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö)';
          span.classList.add('fst-italic');
        } else {
          span.textContent = '–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
        }
        files.appendChild(span);
      } else {
        t.files.forEach(f => {
          const playMime = ['video/mp4','video/webm','audio/mpeg','audio/mp3','audio/aac','audio/ogg'];
          const btn = document.createElement('a');
          btn.className = 'btn btn-outline-primary btn-sm rounded-4';
          btn.textContent = f.name;
          const canPlay = playMime.includes(f.mime);
          btn.href = canPlay ? `/torrents/stream/${t.infoHash}/${f.index}` : '#';
          btn.target = canPlay ? '_blank' : '';
          if (!canPlay) btn.classList.add('disabled');
          files.appendChild(btn);
        });
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ—Ä—Ä–µ–Ω—Ç–∞
    const statusEl = el.querySelector('[data-status]');
    if (statusEl) {
      let statusText = '';
      let statusClass = 'text-muted';
      
      if (t.paused) {
        statusText = '‚è∏Ô∏è –¢–æ—Ä—Ä–µ–Ω—Ç –Ω–∞ –ø–∞—É–∑–µ';
        statusClass = 'text-warning';
      } else if (t.progress === 0 && t.numPeers === 0) {
        statusText = 'üîç –ü–æ–∏—Å–∫ –ø–∏—Ä–æ–≤...';
        statusClass = 'text-info';
      } else if (t.progress === 0 && t.numPeers > 0) {
        statusText = 'üì• –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∏—Ä–∞–º...';
        statusClass = 'text-primary';
      } else if (t.progress > 0 && t.progress < 100) {
        statusText = 'üì• –ó–∞–≥—Ä—É–∑–∫–∞...';
        statusClass = 'text-success';
      } else if (t.progress === 100) {
        statusText = '‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
        statusClass = 'text-success';
      }
      
      statusEl.textContent = statusText;
      statusEl.className = `mt-1 small ${statusClass}`;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å–æ–∫–µ—Ç–æ–≤
  socket.on('torrent:add', (torrent) => {
    console.log('–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–æ—Ä—Ä–µ–Ω—Ç:', torrent);
    renderItem(torrent);
  });
  
  socket.on('torrent:update', (torrent) => {
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞:', torrent);
    renderItem(torrent);
  });
  
  socket.on('torrent:remove', ({infoHash}) => {
    console.log('–£–¥–∞–ª–µ–Ω —Ç–æ—Ä—Ä–µ–Ω—Ç:', infoHash);
    const el = document.getElementById('t_'+infoHash);
    if (el) el.remove();
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ—Ä—Ä–µ–Ω—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  (async () => {
    try {
      const res = await fetch('/torrents/api/list');
      const data = await res.json();
      if (data && data.items) {
        console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤:', data.items.length);
        data.items.forEach(renderItem);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤:', error);
    }
  })();

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤ (–∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã)
  setInterval(async () => {
    try {
      const res = await fetch('/torrents/api/list');
      const data = await res.json();
      if (data && data.items) {
        data.items.forEach(renderItem);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º "–∑–∞–≤–∏—Å—à–∏–µ" —Ç–æ—Ä—Ä–µ–Ω—Ç—ã (0% –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥)
        data.items.forEach(torrent => {
          if (torrent.progress === 0 && torrent.numPeers === 0 && !torrent.paused) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ "–∑–∞–≤–∏—Å" –ª–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç
            const torrentEl = document.getElementById('t_' + torrent.infoHash);
            if (torrentEl) {
              const statusEl = torrentEl.querySelector('[data-status]');
              if (statusEl && statusEl.textContent.includes('–ü–æ–∏—Å–∫ –ø–∏—Ä–æ–≤')) {
                // –ï—Å–ª–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç –¥–æ–ª–≥–æ –∏—â–µ—Ç –ø–∏—Ä–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                statusEl.textContent = '‚ö†Ô∏è –î–æ–ª–≥–∏–π –ø–æ–∏—Å–∫ –ø–∏—Ä–æ–≤ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫';
                statusEl.className = 'mt-1 small text-warning';
              }
            }
          }
        });
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    }
  }, 2000);
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ "–∑–∞–≤–∏—Å—à–∏—Ö" —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  setInterval(async () => {
    try {
      const res = await fetch('/torrents/api/list');
      const data = await res.json();
      if (data && data.items) {
        data.items.forEach(torrent => {
          // –ï—Å–ª–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç –Ω–∞ 0% –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥ –∏ –Ω–µ—Ç –ø–∏—Ä–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
          if (torrent.progress === 0 && torrent.numPeers === 0 && !torrent.paused) {
            const torrentEl = document.getElementById('t_' + torrent.infoHash);
            if (torrentEl) {
              const statusEl = torrentEl.querySelector('[data-status]');
              if (statusEl) {
                statusEl.innerHTML = '‚ö†Ô∏è –¢–æ—Ä—Ä–µ–Ω—Ç –Ω–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—Ä—É–µ—Ç - <button class="btn btn-warning btn-sm" onclick="forceStartTorrent(\'' + torrent.infoHash + '\')">–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫</button>';
                statusEl.className = 'mt-1 small text-warning';
              }
            }
          }
        });
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    }
  }, 30000);

  document.getElementById('magnetForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const val = document.getElementById('magnetInput').value.trim();
    if (!val) return;
    
    try {
      const response = await fetch('/torrents/api/add-magnet', { 
        method:'POST', 
        headers:{'Content-Type':'application/json'}, 
        body: JSON.stringify({ magnet: val }) 
      });
      
      const result = await response.json();
      if (result.success) {
        console.log('–¢–æ—Ä—Ä–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω:', result.infoHash);
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        document.getElementById('magnetInput').value = '';
      } else {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞:', result.msg);
        alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞: ' + result.msg);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞:', error);
      alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞');
    }
  });

  const dz = document.getElementById('dropZone');
  const fi = document.getElementById('fileInput');
  document.getElementById('chooseBtn').onclick = () => fi.click();
  ['dragenter','dragover','dragleave','drop'].forEach(ev => dz.addEventListener(ev, e => { e.preventDefault(); e.stopPropagation(); }));
  dz.addEventListener('dragover', () => dz.classList.add('bg-body-tertiary'));
  dz.addEventListener('dragleave', () => dz.classList.remove('bg-body-tertiary'));
  dz.addEventListener('drop', async (e) => {
    dz.classList.remove('bg-body-tertiary');
    const file = e.dataTransfer.files[0];
    if (!file) return;
    
    try {
      const fd = new FormData();
      fd.append('torrent', file);
      const response = await fetch('/torrents/api/add-file', { method:'POST', body: fd });
      const result = await response.json();
      
      if (result.success) {
        console.log('–¢–æ—Ä—Ä–µ–Ω—Ç –∏–∑ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω:', result.infoHash);
      } else {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞:', result.msg);
        alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞: ' + result.msg);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞:', error);
      alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞');
    }
  });
  
  fi.addEventListener('change', async (e) => {
    const file = e.target.files[0];
    if (!file) return;
    
    try {
      const fd = new FormData();
      fd.append('torrent', file);
      const response = await fetch('/torrents/api/add-file', { method:'POST', body: fd });
      const result = await response.json();
      
      if (result.success) {
        console.log('–¢–æ—Ä—Ä–µ–Ω—Ç –∏–∑ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω:', result.infoHash);
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ —Ñ–∞–π–ª–∞
        fi.value = '';
      } else {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞:', result.msg);
        alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞: ' + result.msg);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞:', error);
      alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞');
    }
  });

  // YTS –ø–æ–∏—Å–∫
  const ytsSearchForm = document.getElementById('ytsSearchForm');
  const ytsSearchInput = document.getElementById('ytsSearchInput');
  const ytsResults = document.getElementById('ytsResults');
  const ytsResultsList = document.getElementById('ytsResultsList');
  const ytsFiles = document.getElementById('ytsFiles');
  const ytsFilesList = document.getElementById('ytsFilesList');

  ytsSearchForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const query = ytsSearchInput.value.trim();
    if (!query) return;

    try {
      ytsResultsList.innerHTML = '<div class="text-center"><div class="spinner-border" role="status"></div><div class="mt-2">–ü–æ–∏—Å–∫...</div></div>';
      ytsResults.style.display = 'block';
      ytsFiles.style.display = 'none';

      const res = await fetch(`/api/yts/search?query=${encodeURIComponent(query)}`);
      const data = await res.json();

      if (data.success && data.items) {
        renderYtsResults(data.items);
      } else {
        ytsResultsList.innerHTML = `<div class="alert alert-warning">${data.msg || '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞'}</div>`;
      }
    } catch (error) {
      console.error('Kinozal search error:', error);
      kinozalResultsList.innerHTML = '<div class="alert alert-danger">–û—à–∏–±–∫–∞ —Å–µ—Ç–∏</div>';
    }
  });

  function renderYtsResults(items) {
    if (!items || items.length === 0) {
      ytsResultsList.innerHTML = '<div class="alert alert-info">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>';
      return;
    }

    ytsResultsList.innerHTML = items.map(item => `
      <div class="card rounded-3 border">
        <div class="card-body p-3">
          <div class="d-flex gap-3 align-items-start">
            <img src="${item.poster || '/images/not-found.png'}" alt="poster" style="width:64px;height:96px;object-fit:cover;border-radius:8px"/>
            <div class="flex-grow-1">
              <div class="d-flex justify-content-between align-items-start">
                <div>
                  <h6 class="mb-1">${item.title}</h6>
                  <div class="small text-muted">
                    –†–∞–∑–º–µ—Ä: ${item.size || ''} | –°–∏–¥—ã: ${item.seeds} | –õ–∏—á–∏: ${item.leeches} | –†–µ–π—Ç–∏–Ω–≥: ${item.rating ?? ''}
                  </div>
                </div>
                      <div class="d-flex gap-2">
        <button class="btn btn-outline-secondary btn-sm rounded-3" onclick="openYtsDetails('${item.movieId}')">–î–µ—Ç–∞–ª–∏</button>
        ${item.torrents && item.torrents.length > 0 ? `<button class="btn btn-outline-primary btn-sm rounded-3" onclick="showYtsTorrents('${item.movieId}')">–¢–æ—Ä—Ä–µ–Ω—Ç—ã</button>` : ''}
        ${item.torrents && item.torrents.length > 0 ? `<button class="btn btn-outline-success btn-sm rounded-3" onclick="addBestTorrent('${item.movieId}')">–î–æ–±–∞–≤–∏—Ç—å –ª—É—á—à–∏–π</button>` : ''}
      </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    `).join('');
  }

  async function showYtsTorrents(movieId) {
    try {
      ytsFilesList.innerHTML = '<div class="text-center"><div class="spinner-border spinner-border-sm" role="status"></div><div class="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤...</div></div>';
      ytsFiles.style.display = 'block';

      const res = await fetch(`/api/yts/details/${movieId}`);
      const data = await res.json();

      if (data.success && data.info && data.info.torrents) {
        renderYtsTorrents(data.info.torrents);
      } else {
        ytsFilesList.innerHTML = `<div class="alert alert-warning">–¢–æ—Ä—Ä–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>`;
      }
    } catch (error) {
      console.error('Torrents error:', error);
      ytsFilesList.innerHTML = '<div class="alert alert-danger">–û—à–∏–±–∫–∞ —Å–µ—Ç–∏</div>';
    }
  }

  function renderYtsTorrents(torrents) {
    if (!torrents || torrents.length === 0) {
      ytsFilesList.innerHTML = '<div class="alert alert-info">–¢–æ—Ä—Ä–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
      return;
    }

    ytsFilesList.innerHTML = torrents.map(torrent => `
      <div class="d-flex justify-content-between align-items-center p-2 bg-body-secondary rounded-2 mb-2">
        <div class="flex-grow-1">
          <div class="small fw-bold">${torrent.title}</div>
          <div class="small text-muted">–†–∞–∑–º–µ—Ä: ${torrent.size} | –°–∏–¥—ã: ${torrent.seeds} | –õ–∏—á–∏: ${torrent.leeches}</div>
          ${torrent.quality ? `<div class="small text-muted">–ö–∞—á–µ—Å—Ç–≤–æ: ${torrent.quality}</div>` : ''}
        </div>
        <button class="btn btn-outline-success btn-sm" onclick="addTorrentMagnet('${torrent.link}')">
          –î–æ–±–∞–≤–∏—Ç—å
        </button>
      </div>
    `).join('');
  }

  async function openYtsDetails(movieId) {
    try {
      const res = await fetch(`/api/yts/details/${movieId}`);
      const data = await res.json();
      if (!data.success) { alert(data.msg || '–û—à–∏–±–∫–∞'); return; }
      const m = data.info;
      const body = document.getElementById('ytsDetailsBody');
      document.getElementById('ytsDetailsTitle').textContent = `${m.title} (${m.year})`;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ Kinopoisk —Ñ–∏–ª—å–º–æ–º
      const isKinopoisk = movieId.startsWith('kinopoisk_');
      
      if (isKinopoisk) {
        // –î–ª—è Kinopoisk —Ñ–∏–ª—å–º–æ–≤
        body.innerHTML = `
          <div class="d-flex gap-3">
            <img src="${m.poster || ''}" style="width:160px;height:240px;object-fit:cover;border-radius:10px" onerror="this.style.display='none'"/>
            <div>
              <div class="mb-2"><strong>–†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫:</strong> ${m.ratingKinopoisk ?? '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</div>
              <div class="mb-2"><strong>–†–µ–π—Ç–∏–Ω–≥ IMDb:</strong> ${m.ratingImdb ?? '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</div>
              <div class="mb-2"><strong>–ñ–∞–Ω—Ä—ã:</strong> ${(m.genres||[]).join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}</div>
              <div class="mb-2"><strong>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> ${m.runtime || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} –º–∏–Ω</div>
              <div class="mb-2"><strong>–†–µ–∂–∏—Å—Å–µ—Ä:</strong> ${m.director || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
              <div class="mb-2"><strong>–°—Ç—Ä–∞–Ω—ã:</strong> ${(m.countries||[]).join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}</div>
              <div class="mb-2"><strong>IMDb ID:</strong> ${m.imdbCode || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
              <div class="mb-2"><strong>–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥:</strong> ${m.ageRating ? m.ageRating + '+' : '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
              <div class="mb-2"><strong>–¢–∏–ø:</strong> ${m.type === 'series' ? '–°–µ—Ä–∏–∞–ª' : '–§–∏–ª—å–º'}</div>
            </div>
          </div>
          <div class="mt-3">${m.overview || m.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}</div>
          <h6 class="mt-3">–ê–∫—Ç–µ—Ä—ã</h6>
          <div class="d-flex flex-wrap gap-2">
            ${(m.cast||[]).slice(0,12).map(c=>`<span class="badge text-bg-secondary">${c}</span>`).join('') || '<span class="text-muted">–ê–∫—Ç–µ—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã</span>'}
          </div>
          ${m.torrents && m.torrents.length > 0 ? `
            <h6 class="mt-3">–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ—Ä—Ä–µ–Ω—Ç—ã (${m.torrents.length})</h6>
            <div class="d-flex flex-wrap gap-2">
              ${m.torrents.slice(0, 5).map(t=>`<button class="btn btn-outline-primary btn-sm rounded-3" onclick="addTorrentMagnet('${t.link}')">${t.title.substring(0, 30)}... ‚Ä¢ ${t.size} ‚Ä¢ ${t.seeds}‚Üë</button>`).join('')}
            </div>
          ` : `
            <div class="mt-3 alert alert-info">
              <strong>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong> –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Kinopoisk API. –¢–æ—Ä—Ä–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.
            </div>
          `}
        `;
      } else {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ (–µ—Å–ª–∏ –±—É–¥—É—Ç)
        body.innerHTML = `
          <div class="d-flex gap-3">
            <img src="${m.poster || ''}" style="width:160px;height:240px;object-fit:cover;border-radius:10px"/>
            <div>
              <div class="mb-2"><strong>–†–µ–π—Ç–∏–Ω–≥:</strong> ${m.rating ?? ''}</div>
              <div class="mb-2"><strong>–ñ–∞–Ω—Ä—ã:</strong> ${(m.genres||[]).join(', ')}</div>
              <div class="mb-2"><strong>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> ${m.runtime || ''} –º–∏–Ω</div>
              <div class="mb-2"><strong>IMDB:</strong> ${m.imdbCode || ''}</div>
            </div>
          </div>
          <div class="mt-3">${m.description || ''}</div>
          <h6 class="mt-3">–ê–∫—Ç–µ—Ä—ã</h6>
          <div class="d-flex flex-wrap gap-2">
            ${(m.cast||[]).slice(0,12).map(c=>`<span class="badge text-bg-secondary">${c.name}${c.character?` ‚Äî ${c.character}`:''}</span>`).join('')}
          </div>
          <h6 class="mt-3">–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ—Ä—Ä–µ–Ω—Ç—ã</h6>
          <div class="d-flex flex-wrap gap-2">
            ${m.torrents.map(t=>`<button class="btn btn-outline-primary btn-sm rounded-3" onclick="addYtsMagnet('${t.hash}')">${t.quality} ${t.type} ‚Ä¢ ${t.size}</button>`).join('')}
          </div>
        `;
      }
      
      const modal = new bootstrap.Modal(document.getElementById('ytsDetailsModal'));
      modal.show();
    } catch (e) {
      alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π');
    }
  }

  async function addTorrentMagnet(magnetLink) {
    try {
      const response = await fetch('/torrents/api/add-magnet', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ magnet: magnetLink })
      });
      
      const result = await response.json();
      if (result.success) {
        console.log('YTS —Ç–æ—Ä—Ä–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω:', result.infoHash);
        alert('–¢–æ—Ä—Ä–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–≥—Ä—É–∑–∫–∏!');
      } else {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è YTS —Ç–æ—Ä—Ä–µ–Ω—Ç–∞:', result.msg);
        alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞: ' + result.msg);
      }
    } catch (error) {
      console.error('Add torrent error:', error);
      alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞');
    }
  }

  async function addBestTorrent(movieId) {
    try {
      const res = await fetch(`/api/yts/details/${movieId}`);
      const data = await res.json();

      if (data.success && data.info && data.info.torrents && data.info.torrents.length > 0) {
        const bestTorrent = data.info.torrents[0]; // –ü–µ—Ä–≤—ã–π —Ç–æ—Ä—Ä–µ–Ω—Ç (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —Å–∏–¥–∞–º)
        const response = await fetch('/torrents/api/add-magnet', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ magnet: bestTorrent.link })
        });
        
        const result = await response.json();
        if (result.success) {
          console.log('–õ—É—á—à–∏–π —Ç–æ—Ä—Ä–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω:', result.infoHash);
          alert(`–î–æ–±–∞–≤–ª–µ–Ω –ª—É—á—à–∏–π —Ç–æ—Ä—Ä–µ–Ω—Ç: ${bestTorrent.title.substring(0, 50)}...`);
        } else {
          console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª—É—á—à–µ–≥–æ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞:', result.msg);
          alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞: ' + result.msg);
        }
      } else {
        alert('–¢–æ—Ä—Ä–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    } catch (error) {
      console.error('Add best torrent error:', error);
      alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞');
    }
  }

  async function addYtsMagnet(hash) {
    try {
      // –î–ª—è YTS –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å magnet —Å—Å—ã–ª–∫—É –∏–∑ hash
      const magnetLink = `magnet:?xt=urn:btih:${hash}`;
      const response = await fetch('/torrents/api/add-magnet', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ magnet: magnetLink })
      });
      
      const result = await response.json();
      if (result.success) {
        console.log('YTS —Ç–æ—Ä—Ä–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω:', result.infoHash);
        alert('–¢–æ—Ä—Ä–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–≥—Ä—É–∑–∫–∏!');
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = bootstrap.Modal.getInstance(document.getElementById('ytsDetailsModal'));
        if (modal) modal.hide();
      } else {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è YTS —Ç–æ—Ä—Ä–µ–Ω—Ç–∞:', result.msg);
        alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞: ' + result.msg);
      }
    } catch (error) {
      console.error('Add YTS torrent error:', error);
      alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞');
    }
  }

  async function forceStartTorrent(infoHash) {
    try {
      const response = await fetch(`/torrents/api/${infoHash}/force-start`, { method:'POST' });
      const result = await response.json();
      if (result.success) {
        console.log('–¢–æ—Ä—Ä–µ–Ω—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—â–µ–Ω');
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        const torrentEl = document.getElementById('t_' + infoHash);
        if (torrentEl) {
          const statusEl = torrentEl.querySelector('[data-status]');
          if (statusEl) {
            statusEl.textContent = '‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—â–µ–Ω...';
            statusEl.className = 'mt-1 small text-info';
          }
        }
      } else {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:', result.msg);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: ' + result.msg);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ:', error);
      alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ');
    }
  }
</script>